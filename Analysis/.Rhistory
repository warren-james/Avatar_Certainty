count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(num_succ)
} else {
continue = FALSE
print("done")
}
}
}
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
library(brms)
library(rethinking)
library(rstan)
library(tidybayes)
library(tidyverse)
#### Constants ####
travel_time <- 100
#### Any Functions ####
# plotting mean estimates
STAN_plt <- function(model_output, dataframe, effs){
# setup plt data
plt_data <- as.tibble(model_output) %>%
gather(key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(dataframe)
# make plt to output
output <- plt_data %>%
ggplot(aes(pred_mu,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
if(effs == 2){
output <- output + facet_wrap(~plt_data[[4]])
} else if(effs == 3){
output <- output + facet_grid(plt_data[[4]]~plt_data[[5]])
}
return(output)
}
#### Load in data ####
load("scratch/data/df_Aberdeen_decisions")
# make model data
model_data <- df_Aberdeen_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta))
# add in binary predictors for stan modelling
# condition
model_data$cnd_rand <- 1
model_data$cnd_rand[model_data$truck_perf == "Constant"] <- 0
# reduce down columns
model_data <- model_data %>%
select(-condition,
-spread,
-initial_x,
-speed) %>% # only for now
mutate(Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1 + 1e-8) %>%
mutate(Abs_Norm_pos = (Abs_Norm_pos + 1e-5)*0.9999,
dist_type = ifelse(Norm_Delta > median(Norm_Delta), "far", "close"))
# make truck only
model_truckonly <- model_data %>%
filter(condition_label == "truck")
range(model_truckonly$participant)
colnames(model_truckonly)
load("scratch/data/df_Essex_decisions")
head(df_Essex_decisions)
head(truck_only)
View(model_truckonly)
model_data_E <- df_Essex_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta),
cnd_rand = ifelse(truck_perf == "Constant", 0, 1),
Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1 + 1e-8) %>%
mutate(Abs_Norm_pos = (Abs_Norm_pos + 1e-5)*0.9999,
dist_type = ifelse(Norm_Delta > median(Norm_Delta), "far", "close"))
colnames(model_truckonly)
model_compare_A <- model_truckonly %>%
select(participant,
truck_perf,
dist_type) %>%
mutate(group = "Aberdeen")
head(model_compare_A)
model_compare_A <- model_truckonly %>%
select(participant,
truck_perf,
dist_type,
Abs_Norm_pos) %>%
mutate(group = "Aberdeen")
head(model_compare_A)
model_compare <- model_data_E %>%
select(participant,
Abs_Norm_pos,
truck_perf,
dist_type) %>%
mutate(group = "Essex") %>%
rbind(model_compare_A)
range(model_compare$Abs_Norm_pos)
compare_brms <- brm(Abs_Norm_pos ~ (truck_perf + dist_type + group)^3,
data = model_compare,
family = "beta",
chaines = 1,
cores = 1,
iter = 2000)
compare_brms <- brm(Abs_Norm_pos ~ (truck_perf + dist_type + group)^3,
data = model_compare,
family = "beta",
chains = 1,
cores = 1,
iter = 2000)
summary(compare_brms)
plot(marginal_effects(compare_brms))
plt_group_dist <- model_compare %>%
add_predicted_draws(compare_brms)
rm(plt_group_dist)
plt_compare_group <- model_compare %>%
add_predicted_draws(compare_brms) %>%
ggplot(aes(.prediction, colour = dist_type, fill = dist_type)) +
geom_density(alpha = 0.3) +
# geom_density(data = model_data,
#              aes(Accuracy,
#                  colour = dist_type,
#                  fill = NA),
#              alpha = 0.0001) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_grid(truck_perf~group)
plt_compare_group
plt_compare_group <- model_compare %>%
add_predicted_draws(compare_brms) %>%
ggplot(aes(.prediction, colour = group, fill = group)) +
geom_density(alpha = 0.3) +
# geom_density(data = model_data,
#              aes(Accuracy,
#                  colour = dist_type,
#                  fill = NA),
#              alpha = 0.0001) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_grid(truck_perf~dist_type)
plt_compare_group
launch_shinystan(compare_brms)
<- model.matrix(Abs_Norm_pos ~ (dist_type + truck_perf + condition_label)^3,
data = model_data)
# add in row identifier
model_data <- model_data %>%
rownames_to_column(var = "row_num") %>%
select(row_num, truck_perf, condition_label, dist_type, Abs_Norm_pos)
stan_df <- list(
N = nrow(model_data),
K = ncol(X),
y = model_data$Abs_Norm_pos,
X = X
)
m_stan_full_pos <- stan(
file = "models/stan_files/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
samples <- rstan::extract(m_stan_full_pos)
X <- model.matrix(Abs_Norm_pos ~ (dist_type + truck_perf + condition_label)^3,
data = model_data)
model_data <- model_data %>%
rownames_to_column(var = "row_num") %>%
select(row_num, truck_perf, condition_label, dist_type, Abs_Norm_pos)
stan_df <- list(
N = nrow(model_data),
K = ncol(X),
y = model_data$Abs_Norm_pos,
X = X
)
m_stan_full_pos <- stan(
file = "models/stan_files/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
plt_stan_full_pos <- STAN_plt(samples$mu, model_data, effs = 3)
samples <- rstan::extract(m_stan_full_pos)
plt_stan_full_pos <- STAN_plt(samples$mu, model_data, effs = 3)
temp <- plt_stan_full_pos[["data"]]
plt_stan_full_pos
colnames(temp)
colnames(model_Data)
colnames(model_data)
model_data <- model_data %>%
rownames_to_column(var = "row_num") %>%
select(row_num, Abs_Norm_pos, truck_perf, condition_label, dist_type)
colnames(model_data)
head(model_data)
# make model data
model_data <- df_Aberdeen_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta)) %>%
select(-condition,
-spread,
-initial_x,
-speed) %>% # only for now
mutate(Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1 + 1e-8) %>%
mutate(Abs_Norm_pos = (Abs_Norm_pos + 1e-5)*0.9999,
dist_type = ifelse(Norm_Delta > median(Norm_Delta), "far", "close"))
model_data <- model_data %>%
rownames_to_column(var = "row_num") %>%
select(row_num, Abs_Norm_pos, truck_perf, condition_label, dist_type)
head(model_data)
# plotting mean estimates
STAN_plt <- function(model_output, dataframe, effs){
# setup plt data
plt_data <- as.tibble(model_output) %>%
gather(key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(dataframe)
# make plt to output
output <- plt_data %>%
ggplot(aes(pred_mu,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol()
if(effs == 2){
output <- output + facet_wrap(~plt_data[[5]])
} else if(effs == 3){
output <- output + facet_grid(plt_data[[5]]~plt_data[[6]])
}
return(output)
}
plt_stan_full_pos <- STAN_plt(samples$mu, model_data, effs = 3)
plt_splt_stan_full_pos
model_output <- samples$mu
dataframe <- model_data
effs = 3
plt_data <- as.tibble(model_output) %>%
gather(key = "remove",
value = "pred_mu") %>%
group_by(remove) %>%
mutate(row_num = strsplit(remove, split = "V")[[1]][2]) %>%
ungroup() %>%
select(-remove) %>%
merge(dataframe)
head(plt_data)
plt_stan_full_pos <- STAN_plt(samples$mu, model_data, effs = 3)
plt_stan_full_pos
X <- model.matrix(Abs_Norm_pos ~ (dist_type + truck_perf + group)^3,
data = model_compare)
model_data_compare_stan <- model_compare %>%
rownames_to_column(var = "row_num") %>%
select(row_num, Abs_Norm_pos, truck_perf, group, dist_type)
stan_df <- list(
N = nrow(model_data_compare_stan),
K = ncol(X),
y = model_data_compare_stan$Abs_Norm_pos,
X = X
)
m_stan_compare <- stan(
file = "models/stan_files/stan_model.stan",
data = stan_df,
chains = 1,
warmup = 1000,
iter = 2000,
refresh = 100
)
rm(plt_compare_group)
rm(samples)
samples <- rstan::extract(m_stan_full_pos)
plt_stan_full_pos <- STAN_plt(samples$mu, model_data, effs = 3)
plt_stan_full_pos$labels$x <- "Predicted Mean Placement Position"
plt_stan_full_pos$labels$colour <- "Truck Performance"
plt_stan_full_pos$labels$fill <- "Truck Performance"
plt_stan_full_pos
plt_stan_full_pos <- STAN_plt(samples$mu, model_data_compare_stan, effs = 3)
plt_stan_full_pos
samples <- rstan::extract(m_stan_compare)
plt_stan_full_pos <- STAN_plt(samples$mu, model_data_compare_stan, effs = 3)
plt_stan_full_pos$labels$x <- "Predicted Mean Placement Position"
plt_stan_full_pos$labels$colour <- "Truck Performance"
plt_stan_full_pos$labels$fill <- "Truck Performance"
plt_stan_full_pos
quit()
