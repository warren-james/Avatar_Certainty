filter(abs_Norm_Pos <= 2.1) %>%
summarise(Variability = sd(abs_Norm_Pos)) %>%
mutate(Task = "Throwing") %>%
ungroup()
df_consist_sep <- df_consist_det_sep %>%
select(Participant,
standard,
Variability,
Task)
df_consist_sep <- rbind(df_consist_sep, df_consist_throw_sep)
# make a plot
df_consist_sep %>%
ggplot(aes(Task, Variability)) +
geom_line(aes(group = Participant)) +
facet_wrap(~standard)
#### VARIABILITY: scatter plot ####
# sort out throwing in the same way as det and make scatter plot?
df_consist_throw_sep_2 <- df_part2_Throw %>%
group_by(Participant,
stand_pos,
standard) %>%
summarise(n = n()) %>%
mutate(n = n/15) %>%
ungroup() %>%
complete(Participant,
stand_pos,
standard,
fill = list(n = 0)) %>%
spread(stand_pos, n) %>%
ungroup() %>%
group_by(Participant,
standard) %>%
mutate(consistency = max(`1`,`2`,`3`) - min(`1`,`2`,`3`),
Task = "Throwing",
Variability = 1 - consistency) %>%
ungroup()
# make plot
plt_consist_scatter <- rbind(df_consist_det_sep, df_consist_throw_sep_2) %>%
merge(df_order) %>%
mutate(Det_first = as.factor(Det_first)) %>%
group_by(Participant, Task, Det_first) %>%
summarise(Variability = mean(Variability)) %>%
spread(Task, Variability) %>%
ggplot(aes(Detection, Throwing)) +
geom_point(aes(colour = Det_first)) +
geom_abline(intercept = 0, slope = 1) +
scale_y_continuous(breaks = c(0,.2,.4,.6,.8), limits = c(0,.9)) +
scale_colour_ptol() +
theme_bw() +
theme(legend.position = "none")
plt_consist_scatter
# save
ggsave(file = "Plots/both_Variability_scatter.png",
width = 8,
height = 8,
units = "in")
#### POSITION ####
#### POSITION: Plot of standing positions and fixations ####
# not sure how to show this apart from two separate plots?
# maybe some side-by-side small plots?
plt_both_pos_det <- df_part2_Det %>%
select(Participant,
Athlete,
Centre,
standard) %>%
mutate(Task = "Detection") %>%
group_by(Participant, Athlete, standard) %>%
summarise(Side = 1 - mean(Centre))
plt_both_pos <- df_part2_Throw %>%
filter(abs_Norm_Pos < 2.1) %>%
mutate(Task = "Throwing") %>%
ggplot(aes(standard, abs_Norm_Pos)) +
geom_point(aes(colour = Athlete),
alpha = 0.3) +
geom_point(data = plt_both_pos_det,
aes(standard, Side),
shape = 8) +
theme_bw() +
theme(strip.text.x = element_blank()) +
scale_shape(guide = "none") +
scale_colour_ptol() +
facet_wrap(~Athlete + Participant)
plt_both_pos$labels$x <- "Standardised Delta"
plt_both_pos$labels$y <- "Absolute Position"
plt_both_pos
# save
ggsave(file = "Plots/both_Position.png",
width = 12,
height = 8,
units = "in")
#### some distribution plots ####
df_pos %>%
ggplot(aes(mean_pos,
colour = Task,
fill = Task)) +
geom_density(alpha = 0.3) +
facet_wrap(~standard)
#### DATA ANALYSIS ####
# still yet to do some formal analysis... but we'll get there
#### some simple anovas on position ####
# simple anova... I guess?
# just with distance as predictor...
model_lm1 <- lm(mean_pos ~ standard,
data = df_pos)
model_lm2 <- lm(mean_pos ~ (standard + Task)^2,
data = df_pos)
#### simple t test on opt score ####
# anova first
summary(aov(lm(score ~ (Athlete + Task)^2, data = plt_opt_score[["data"]])))
# compare athlete to non
# get data
df_score_t_test_athlete <- plt_opt_score[["data"]] %>%
group_by(Participant, Athlete) %>%
summarise(score = mean(score))
# run t-test
t.test(score~Athlete, data = df_score_t_test_athlete)
# compare Task
# get data
df_score_t_test_task <- plt_opt_score[["data"]] %>%
group_by(Participant, Task) %>%
summarise(score = mean(score))
# run t-test
t.test(score~Task,
paired = T,
data = df_score_t_test_task)
##### simple t test accuracy ####
# anova first
# setup data
df_acc_anova <- plt_accuracy_lines[["data"]] %>%
ungroup() %>%
separate(Accuracy_Task,
into = c("Measure", "Task"),
sep = "_") %>%
group_by(Participant, Athlete, Measure, Task) %>%
summarise(mean_acc = mean(Accuracy)) %>%
spread(Measure, mean_acc) %>%
ungroup() %>%
mutate(acc_diff = Optimal - Expected)
summary(aov(lm(acc_diff ~ (Task + Athlete)^2,
data = df_acc_anova)))
# sort data
df_acc_t_test_Ath <- plt_accuracy_lines[["data"]] %>%
ungroup() %>%
separate(Accuracy_Task,
into = c("Measure", "Task"),
sep = "_") %>%
group_by(Participant, Athlete, Measure) %>%
summarise(mean_acc = mean(Accuracy)) %>%
spread(Measure, mean_acc) %>%
ungroup() %>%
mutate(acc_diff = Optimal - Expected)
# run t test
t.test(acc_diff~Athlete, data = df_acc_t_test_Ath)
# by task
# setup data
df_acc_t_test_Task <- plt_accuracy_lines[["data"]] %>%
ungroup() %>%
separate(Accuracy_Task,
into = c("Measure", "Task"),
sep = "_") %>%
group_by(Participant, Task, Measure) %>%
summarise(mean_acc = mean(Accuracy)) %>%
spread(Measure, mean_acc) %>%
ungroup() %>%
mutate(acc_diff = Optimal - Expected)
# run t test
t.test(acc_diff ~ Task,
paired = TRUE,
data = df_acc_t_test_Task)
summary(aov(lm(acc_diff ~ (Task + Athlete)^2,
data = df_acc_anova)))
summary(aov(lm(score ~ (Athlete + Task)^2, data = plt_opt_score[["data"]])))
head(df_acc_t_test_Ath)
head(df)
setwd("E:/Github/Avatar_Certainty/Analysis")
rm(list = ls())
library(tidyverse)
load("scratch/data/df_decisions")
df_decisions <- as.tibble(df_decisions)
# compute mean and var for each person and condition
(df_decisions %>%
select(participant, truck_perf, delta, placed_x) %>%
mutate(norm_dist = abs(placed_x / delta)) %>%
group_by(participant, truck_perf, delta) %>%
summarise(
mean_position = mean(norm_dist),
var_dist = var(norm_dist))) -> df
plt <- ggplot(df, aes(x = delta, y = mean_position, colour = truck_perf))
plt <- plt + geom_path(aes(group = participant), alpha = 0.33)
plt <- plt + geom_smooth(se = FALSE, size = 3)
plt <- plt + scale_colour_viridis_d(end = 0.5)
plt
# now aggregate to compute mean of means and related standard error
(df %>%
group_by(truck_perf, delta) %>%
summarise(
n = n(),
position = mean(mean_position),
std_err_p = sd(mean_position)/ sqrt(n),
variance = mean(var_dist),
std_err_v = sd(var_dist)/ sqrt(n))) -> df2
position_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(position_aov)
variance_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(variance_aov)
# plot how mean position varies with delta and condition
plt_mean <- ggplot(df2, aes(
x = delta,
y = position,
ymin = position - 1.96 * std_err_p,
ymax = position + 1.96 * std_err_p,
colour = truck_perf))
plt_mean <- plt_mean + geom_errorbar(colour = "gray") + geom_path()
plt_mean <- plt_mean + scale_y_continuous(limits = c(0, 1), expand = c(0, 0))
plt_mean <- plt_mean + scale_x_continuous(breaks = unique(df$delta))
plt_mean <- plt_mean + theme_bw()
plt_mean
# plot how variance position varies with delta and condition
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + theme_bw()
plt
# anovas
pos_aov <- aov(data = df2, position ~ truck_perf * delta)
var_aov <- aov(data = df2, variance ~ delta * truck_perf)
#### SPSS data ####
# sort mean pos
SPSS_mean <- df %>%
group_by(participant) %>%
mutate(mean_position = round(mean_position, digits = 3)) %>%
select(-var_dist) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_position)
rm(list = ls())
library(tidyverse)
load("scratch/data/df_Essec_decisions")
df_decisions <- as.tibble(df_Essex_decisions)
# compute mean and var for each person and condition
(df_decisions %>%
select(participant, truck_perf, delta, placed_x) %>%
mutate(norm_dist = abs(placed_x / delta)) %>%
group_by(participant, truck_perf, delta) %>%
summarise(
mean_position = mean(norm_dist),
var_dist = var(norm_dist))) -> df
plt <- ggplot(df, aes(x = delta, y = mean_position, colour = truck_perf))
plt <- plt + geom_path(aes(group = participant), alpha = 0.33)
plt <- plt + geom_smooth(se = FALSE, size = 3)
plt <- plt + scale_colour_viridis_d(end = 0.5)
plt
# now aggregate to compute mean of means and related standard error
(df %>%
group_by(truck_perf, delta) %>%
summarise(
n = n(),
position = mean(mean_position),
std_err_p = sd(mean_position)/ sqrt(n),
variance = mean(var_dist),
std_err_v = sd(var_dist)/ sqrt(n))) -> df2
position_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(position_aov)
variance_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(variance_aov)
# plot how mean position varies with delta and condition
plt_mean <- ggplot(df2, aes(
x = delta,
y = position,
ymin = position - 1.96 * std_err_p,
ymax = position + 1.96 * std_err_p,
colour = truck_perf))
plt_mean <- plt_mean + geom_errorbar(colour = "gray") + geom_path()
plt_mean <- plt_mean + scale_y_continuous(limits = c(0, 1), expand = c(0, 0))
plt_mean <- plt_mean + scale_x_continuous(breaks = unique(df$delta))
plt_mean <- plt_mean + theme_bw()
plt_mean
# plot how variance position varies with delta and condition
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + theme_bw()
plt
# anovas
pos_aov <- aov(data = df2, position ~ truck_perf * delta)
var_aov <- aov(data = df2, variance ~ delta * truck_perf)
#### SPSS data ####
# sort mean pos
SPSS_mean <- df %>%
group_by(participant) %>%
mutate(mean_position = round(mean_position, digits = 3)) %>%
select(-var_dist) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_position)
load("scratch/data/df_Essex_decisions")
df_decisions <- as.tibble(df_Essex_decisions)
# compute mean and var for each person and condition
(df_decisions %>%
select(participant, truck_perf, delta, placed_x) %>%
mutate(norm_dist = abs(placed_x / delta)) %>%
group_by(participant, truck_perf, delta) %>%
summarise(
mean_position = mean(norm_dist),
var_dist = var(norm_dist))) -> df
plt <- ggplot(df, aes(x = delta, y = mean_position, colour = truck_perf))
plt <- plt + geom_path(aes(group = participant), alpha = 0.33)
plt <- plt + geom_smooth(se = FALSE, size = 3)
plt <- plt + scale_colour_viridis_d(end = 0.5)
plt
(df %>%
group_by(truck_perf, delta) %>%
summarise(
n = n(),
position = mean(mean_position),
std_err_p = sd(mean_position)/ sqrt(n),
variance = mean(var_dist),
std_err_v = sd(var_dist)/ sqrt(n))) -> df2
position_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(position_aov)
variance_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(variance_aov)
# plot how mean position varies with delta and condition
plt_mean <- ggplot(df2, aes(
x = delta,
y = position,
ymin = position - 1.96 * std_err_p,
ymax = position + 1.96 * std_err_p,
colour = truck_perf))
plt_mean <- plt_mean + geom_errorbar(colour = "gray") + geom_path()
plt_mean <- plt_mean + scale_y_continuous(limits = c(0, 1), expand = c(0, 0))
plt_mean <- plt_mean + scale_x_continuous(breaks = unique(df$delta))
plt_mean <- plt_mean + theme_bw()
plt_mean
# plot how variance position varies with delta and condition
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + theme_bw()
plt
pos_aov <- aov(data = df2, position ~ truck_perf * delta)
var_aov <- aov(data = df2, variance ~ delta * truck_perf)
SPSS_mean <- df %>%
group_by(participant) %>%
mutate(mean_position = round(mean_position, digits = 3)) %>%
select(-var_dist) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_position)
head(df)
df %>%
group_by(participant) %>%
mutate(mean_var = round(var_dist))
df %>%
group_by(participant) %>%
mutate(mean_var = mean(var_dist)) %>%
summarie(n = n())
df %>%
group_by(participant) %>%
mutate(mean_var = mean(var_dist))
df %>%
group_by(participant) %>%
mutate(mean_position = round(mean_position, digits = 3))
head(df)
df %>%
group_by(participant) %>%
select(-mean_position)
SPSS_var <- df %>%
group_by(participant) %>%
select(-mean_position) %>%
unite("value",
truck_perf:delta) %>%
spread(value, var_dist)
head(SPSS_var)
write.csv(SPSS_var, file = "scratch/data/SPSS_var.txt", row.names = F)
library(ggthemes)
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + scale_colour_ptol()
plt <- plt + theme_bw()
plt$labels$x <- "Delta (in pixels)"
plt$labels$y <- "Variance"
plt$labels$colour <- "Truck Performance Condition"
plt
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + scale_colour_ptol()
plt <- plt + theme_bw()
plt$labels$x <- "Delta (in pixels)"
plt$labels$y <- "Variance"
plt$labels$colour <- "Performance Condition"
plt
rm(list = ls())
load("models/outputs/brms/Real/place_compare_brms_3")
get_prior(Abs_Norm_pos ~ (Norm_Delta + truck_perf)^2,
data = model_truckonly,
family = "beta")
# quick brms version
place_real_brms_1 <- brm(Abs_Norm_pos ~ Norm_Delta,
data = model_data,
family = "beta",
iter = 2000,
chains = 1,
cores = 1)
#### Constants ####
travel_time <- 100
#### Any Functions ####
#### Load in data ####
load("scratch/data/df_Aberdeen_decisions")
# make model data
model_data <- df_Aberdeen_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta))
# add in binary predictors for stan modelling
# condition
model_data$cnd_rand <- 1
model_data$cnd_rand[model_data$truck_perf == "Constant"] <- 0
# reduce down columns
model_data <- model_data %>%
select(-condition,
-spread,
-initial_x,
-speed) %>% # only for now
mutate(Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1 + 1e-8) %>%
mutate(Abs_Norm_pos = (Abs_Norm_pos + 1e-5)*0.9999)
model_truckonly <- model_data[model_data$condition_label == "truck",]
get_prior(Abs_Norm_pos ~ (Norm_Delta + truck_perf)^2,
data = model_truckonly,
family = "beta")
dev.off()
load("models/outputs/brms/Pilot/place_pilot_brms_3")
summary(place_pilot_brms_3)
place_compare_brms_3_priors <- brm(Abs_Norm_pos ~ (Norm_Delta + truck_perf)^2,
data = model_truckonly,
family = "beta",
prior = c(set_prior("normal(2.78, 0.08)", class = "b", coef = "Norm_Delta"),
set_prior("normal(0.66, 0.07)", class = "b", coef = "Norm_Delta:truck_perfVariable"),
set_prior("normal(-0.4, 0.11)", class = "b", coef = "truck_perfVariable"),
set_prior("normal(-2.56, 0.06)", class = "Intercept")),
chains = 1,
iter = 2000,
cores = 1)
loo(place_compare_brms_3, place_compare_brms_3_priors)
summary(place_compare_brms_3_priors)
summary(place_compare_brms_3)
place_pilot_brms_3
plot(marginal_effects(place_compare_brms_3_priors))
plot(marginal_effects(place_compare_brms_3))
plot(marginal_effects(place_pilot_brms_3))
place_compare_brms_3_priors <- brm(Abs_Norm_pos ~ (Norm_Delta + truck_perf)^2,
data = model_truckonly,
family = "beta",
prior = c(set_prior("normal(2.78, 0.08)",
class = "b",
coef = "Norm_Delta"),
set_prior("normal(-0.4, 0.11)",
class = "b",
coef = "Norm_Delta:truck_perfVariable"),
set_prior("normal(0.66, 0.07)",
class = "b",
coef = "truck_perfVariable"),
set_prior("normal(-2.56, 0.06)",
class = "Intercept")),
chains = 1, iter = 2000, cores = 1)
LOO(place_compare_brms_3, place_compare_brms_3_priors)
summary(place_compare_brms_3_priors)
summary(place_pilot_brms_3)
plot(marginal_effects(place_compare_brms_3_priors))
plot(marginal_effects(place_compare_brms_3_priors),points = T)
plot(marginal_effects(place_compare_brms_3_priors),points = T, jitter = T)
dev.off()
launch_shinystan(place_compare_brms_3_priors)
?loo.brmsfit
loo_compare(place_compare_brms_3, place_compare_brms_3_priors)
loo(c(place_compare_brms_3, place_compare_brms_3_priors))
help("compare")
library(loo)
compare(place_compare_brms_3, place_compare_brms_3_priors)
compare(loo(place_compare_brms_3), loo(place_compare_brms_3_priors))
save(place_compare_brms_3, file = "models/outputs/brms/Real/place_compare_brms_3")
