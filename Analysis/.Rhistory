mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# label the new "conditions"
plt_dist_dec$dist_type <- "Close"
plt_dist_dec$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# Make the plot
plt_dist_dec <- plt_dist_dec %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
group_by(Participant, dist_type, truck_perf) %>%
summarise(pos = mean(abs_pos)) %>%
ungroup() %>%
ggplot(aes(pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec$labels$x <- "Normalised Placement"
plt_dist_dec$labels$colour <- "Condition"
plt_dist_dec$labels$fill <- "Condition"
plt_dist_dec
# save
ggsave("scratch/plots/plt_dist_dec.png",
height = 8,
width = 14,
units = "cm")
# same again but without getting means
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# make plot
plt_dist_dec_2 <- plt_dist_dec_2 %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
filter(abs_pos < 1.01) %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec_2
# save
ggsave("scratch/plots/plt_dist_dec_2.png",
height = 8,
width = 14,
units = "cm")
# without split, just delta
plt_dist_dec_2$data %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~Delta)
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# make plot
plt_dist_dec_2 <- plt_dist_dec_2 %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
filter(abs_pos < 1.01) %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec_2
plt_dist_dec <- plt_dist_dec %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
group_by(Participant, dist_type, truck_perf) %>%
summarise(pos = mean(abs_pos)) %>%
ungroup() %>%
ggplot(aes(pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec$labels$x <- "Normalised Placement"
plt_dist_dec$labels$colour <- "Condition"
plt_dist_dec$labels$fill <- "Condition"
plt_dist_dec
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# make plot
plt_dist_dec_2 <- plt_dist_dec_2 %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
filter(abs_pos < 1.01) %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec_2
# same again but without getting means
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
View(plt_dist_dec_2)
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# make plot
View(plt_dist_dec_2)
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
View(plt_dist_dec_2)
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
View(plt_dist_dec_2)
rm(list = ls())
#### Avatar - Make some plots ####
# plots of decisions
# compare estimates to actual performance curves
# Something with number of clicks?
# RT may only be useful for modelling?
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
#### Constants ####
travel_time <- 100
#### Libraries ####
library(tidyverse)
library(ggthemes)
library(psyphy)
#### Load in data ####
# Distribution info
load("scratch/data/df_beta")
# Click History
load("scratch/data/df_clickhist")
# Decision phase
load("scratch/data/df_decisions")
# Separations
load("scratch/data/df_deltas")
# Estimate phase
load("scratch/data/df_estimates")
# Screen information
load("scratch/data/df_screen_info")
# demo_phase
load("scratch/data/df_demo_phase")
# avatar info
load("scratch/data/df_avater_info")
# confidence
load("scratch/data/df_confidence")
#### PLOTS: ####
#### PLOTS: Estimates vs actual ####
betas <- unique(df_decisions$Spread)
# setup empty frame to mirror estimates
df_simulated <- data.frame(Participant = character(),
Spread = numeric(),
Delta = numeric(),
Estimate = numeric(),
Estimate_type = character())
# loop to get a simulation of what accuracy would look like
# for each separation in each condition
for(p in unique(df_estimates$Participant)){
# subset
ss <- df_estimates[df_estimates$Participant == p,]
# max speed
max_speed <- df_avatar_info$max_speed[df_avatar_info$Participant == p]
# reach
reach <- df_avatar_info$reach[df_avatar_info$Participant == p]
for(B in unique(betas)){
Spread <- B
# gen distances covered given defined distribution
y <- (round(rbeta(100000, B, B)*max_speed)+1) * travel_time
# make data_frame
deltas <- data.frame(Participant = p,
Spread = B,
Delta = unique(ss$Delta))
deltas <- deltas %>%
group_by(Participant, Spread, Delta) %>%
mutate(Estimate = sum(y >= Delta - reach)/length(y),
Estimate_Type = "Simulated")
# add to data frame
df_simulated = rbind(df_simulated, as.data.frame(deltas))
}
}
# tidy
rm(deltas, ss, B, betas, max_speed, p, Spread, y, reach)
# add in truck_perf
df_simulated$truck_perf <- "Random_Uniform"
df_simulated$truck_perf[df_simulated$Spread > 1] = "Highly_Certain"
# bind data sets?
df_est_sim <- rbind(df_estimates, df_simulated)
# tidy
rm(df_simulated)
# now get glm lines for this
plt_estimates <- df_est_sim %>%
mutate(Spread = as.factor(Spread)) %>%
group_by(Participant, truck_perf, Delta, Estimate_Type) %>%
summarise(Estimate = mean(Estimate)) %>%
ggplot(aes(Delta, Estimate,
colour = Estimate_Type,
shape = Estimate_Type)) +
geom_point() +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = Estimate),
se = F) +
geom_smooth(data = df_demo_phase,
method = glm,
method.args = list(family = "binomial"),
aes(y = Success),
se = F) +
theme_bw() +
facet_wrap(~truck_perf + Participant, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank())
plt_estimates$labels$y <- "Estimated Accuracy"
plt_estimates$labels$colour <- "Estimate Type"
plt_estimates$labels$shape <- "Estimate Type"
plt_estimates
# save
ggsave("scratch/plots/plt_estimates.png",
height = 17,
width = 24,
units = "cm")
#### PLOTS: decision phase ####
plt_decisions <- df_decisions %>%
mutate(Condition = as.factor(Condition),
Spread = as.factor(Spread),
Rand_first = as.factor(Rand_first),
Norm_Placement = abs(Placed_x/Delta)) %>%
ggplot(aes(Delta, Norm_Placement,
colour = truck_perf)) +
geom_point(alpha = 0.2) +
theme_bw() +
facet_wrap(~truck_perf + Participant, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank()) +
scale_colour_ptol()
plt_decisions$labels$x <- "Delta (pixels)"
plt_decisions$labels$y <- "Absolute Normalised Avatar Position"
plt_decisions
# save
ggsave("scratch/plots/plt_decisions.png",
height = 17,
width = 24,
units = "cm")
#### PLOT: decisions phase again... with order info ####
plt_decisions <- df_decisions %>%
mutate(Condition = as.factor(Condition),
Spread = as.factor(Spread),
Rand_first = as.factor(Rand_first),
Norm_Placement = abs(Placed_x/Delta)) %>%
ggplot(aes(Delta, Norm_Placement,
colour = truck_perf)) +
geom_point(alpha = 0.2) +
theme_bw() +
facet_wrap(~Participant + Block + truck_perf, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank()) +
scale_colour_ptol()
plt_decisions$labels$x <- "Delta (pixels)"
plt_decisions$labels$y <- "Absolute Normalised Avatar Position"
plt_decisions
# save
ggsave("scratch/plots/plt_decisions_order.png",
height = 17,
width = 24,
units = "cm")
#### PLOT: placement by furthest and closest, and Condition ####
# plot of placement position
# first, remove the mid point as that's not very diagnostic
plt_dist_dec <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# label the new "conditions"
plt_dist_dec$dist_type <- "Close"
plt_dist_dec$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# Make the plot
plt_dist_dec <- plt_dist_dec %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
group_by(Participant, dist_type, truck_perf) %>%
summarise(pos = mean(abs_pos)) %>%
ungroup() %>%
ggplot(aes(pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec$labels$x <- "Normalised Placement"
plt_dist_dec$labels$colour <- "Condition"
plt_dist_dec$labels$fill <- "Condition"
plt_dist_dec
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec_2$Delta) > plt_dist_dec_2$mid_delta] <- "Far"
# make plot
plt_dist_dec_2 <- plt_dist_dec_2 %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
filter(abs_pos < 1.01) %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec_2
# save
ggsave("scratch/plots/plt_dist_dec_2.png",
height = 8,
width = 14,
units = "cm")
rm(list = ls())
#### Avatar - Analysis script ####
# few ideas
# modelling optimal choice vs. not
# - Define a range for each distance that would get the optimal
#   Accuracy and simply model if people are in that range for each
#   condition at the various distances?
# - Could also just do mean normalised placement again with order
#   and condition as predictors?
# - What about some more simple analysis for the final years working
#   with Alasdair?
#### Library ####
library(tidyverse)
library(rstan)
library(brms) # probably won't need this...
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
# do we ever want to use RT as a predictor?
# might make sense to do this and centre it on the global average?
#### Constants ####
travel_time <- 100
#### Any Functions ####
#### Load in data ####
load("scratch/data/df_decisions")
# make model data
model_data <- df_decisions %>%
mutate(Abs_Norm_pos = abs(Placed_x/Delta))
# add in binary predictors for stan modelling
# condition
model_data$cnd_rand <- 1
model_data$cnd_rand[model_data$truck_perf == "Highly_Certain"] <- 0
# reduce down columns
model_data <- model_data %>%
select(-Condition,
-Spread,
-Initial_x,
-Speed,
-Success,
-standard) %>% # only for now
mutate(Norm_Delta = Delta/max(Delta)) %>%
filter(Abs_Norm_pos < 1.01)
load("scratch/data/df_estimates")
head(df_estimates)
head(df_estimates)
# so sort that
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate))
head(temp)
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf)
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate)
temp
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Highly_Certain, Random_Uniform)) +
geom_point() +
facet_wrap(~Participant)
temp
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Highly_Certain, Random_Uniform,
colour = Delta)) +
geom_point() +
facet_wrap(~Participant)
temp
# so sort that
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
facet_wrap(~Participant)
temp
# so sort that
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
geom_smooth(method = "lm")
facet_wrap(~Participant)
temp
#### Models ####
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~Participant)
temp
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
facet_wrap(~Participant)
temp
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = F) +
facet_wrap(~Participant)
temp
temp <- df_estimates %>%
filter(Estimate_Type == "Participant") %>%
group_by(Participant, truck_perf, Delta) %>%
# summarise(Estimate = mean(Estimate)) %>%
spread(truck_perf, Estimate) %>%
ggplot(aes(Random_Uniform, Highly_Certain,
colour = Delta)) +
geom_point() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = F) +
facet_wrap(~Participant)
temp
library(lme4)
str(df_estimate)
str(df_estimates)
head(df_estimates)
lm(Estimate ~ (Delta + truck_perf), data = df_estimates)
check_cor <- lm(Estimate ~ (Delta + truck_perf)^2, data = df_estimates)
summary(check_cor)
check_cor$df.residual
check_cor$fitted.values
# get the R^2 values
for(p in unique(df_estimates$Participant)){
# subset
ss <- df_estimates[df_estimates$Participant == p,]
# linear model
check_cor <- lm(Estimate ~ (Delta + truck_perf)^2,
data = ss)
# get R^2 value
rsqr <- summary(check_cor)$r.squared
print(rsqr)
}
check_cor <- glm(Estimate ~ (Delta + truck_perf)^2,
data = ss,
family = "beta")
# get R^2 value
rsqr <- summary(check_cor)$r.squared
check_cor <- glm(Estimate ~ (Delta + truck_perf)^2,
data = ss,
family = "beta")
check_cor <- glm(Estimate ~ (Delta + truck_perf)^2,
data = ss,
family = "binomial")
rsqr <- summary(check_cor)$r.squared
print(rsqr)
summary(check_cor)
temp2 <- summary(check_cor)
