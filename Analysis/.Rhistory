library(tidytext)
#### Function ####
numextract <- function(string){
str_extract(string, "\\-*\\d+\\.*\\d*")
}
# proportion of votes
be %>%
ggplot(aes(Share,
colour = Party,
fill = Party)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
position = "dodge") +
geom_density(alpha = .1) +
theme_bw() +
scale_fill_manual(values = p_colours) +
scale_colour_manual(values = p_colours) +
facet_wrap(~Party, scales = "free")
p_colours <- c("lightblue",
"blue",
"green",
"red",
"orange",
"yellow")
# proportion of votes
be %>%
ggplot(aes(Share,
colour = Party,
fill = Party)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
position = "dodge") +
geom_density(alpha = .1) +
theme_bw() +
scale_fill_manual(values = p_colours) +
scale_colour_manual(values = p_colours) +
facet_wrap(~Party, scales = "free")
(0.66 * 2500) + (0.33 * 2400)
(0.66 * 2500) + (0.33 * 2400) + (0.01 *0)
n = 72
x <- seq(0,n,1)
y <- dbinom(x, n, prob = .5)
df_raw <- tibble(x = x/n,
y = y)
df_raw %>%
ggplot(aes(x, y)) +
geom_line()
library(tidyverse)
x <- seq(0,n,1)
y <- dbinom(x, n, prob = .5)
df_raw <- tibble(x = x/n,
y = y)
df_raw %>%
ggplot(aes(x, y)) +
geom_line()
View(df_raw)
0.33 * 2500
0.24 * 2400
rnorm(10, mean = 0, sd = 1)
a <- rnorm(10, mean = 0, sd = 1)
b <- rnorm(10, mean = 2, sd = 1)
t.test(a ~ b)
t.test(a, b)
t.test(a ~ b) -> test
t.test(a,b) -> test
test$p.value
groups <- c("a","b")
length(groups)
tibble(obs = rnorm(10))
temp <- as.tibble(obs = rnorm(10))
temp <- tibble(obs = rnorm(10))
df <- tibble(iter = numeric(),
n = numeric(),
draw = numeric(),
group = character(),
value = numeric())
library(tidyverse)
temp <- tibble(obs = rnorm(10))
head(temp)
n = 1
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
# group descriptives
group_a_mu <- 1
group_b_mu <- 2
group_a_sd <- 1
group_b_sd <- 1
n_subj <- seq(1, 30, 1) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
head(temp)
n = 10
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
head(temp)
View(temp)
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
iter = 1
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
head(temp)
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
}
}
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
group_a_mu <- 1
group_b_mu <- 2
group_a_sd <- 1
group_b_sd <- 1
# other parameters
n_subj <- seq(1, 30, 2) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
head(df)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(sd))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit()
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit() %>%
gather(mu:sd,
key = "measure",
value = "value")
n_subj <- seq(5, 30, 5) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value")
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure, n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure ~ n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_wrap(~n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = m,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = n,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .2) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .2) +
facet_wrap(~n)
my.name <- readline(prompt = "Enter name: ")
list <- c(rep(1, n_success), rep(0, n_doors - n_success))
#### Monty Hall simulation ####
# need to simulate a series of decisions and when switching is good
# parameters
n_doors <- 3
n_success <- 2
# make list
list <- c(rep(1, n_success), rep(0, n_doors - n_success))
library(tidyverse)
#### Monty Hall simulation ####
# need to simulate a series of decisions and when switching is good
#### library ####
library(tidyverse)
#### Functions ####
# make the host
#### Parameters ####
n_doors <- 3
n_success <- 1
n_choices <- 10
# make list
list <- c(rep(1, n_success), rep(0, n_doors - n_success))
list == 0
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
sample(list, 3, replace = F)
which(list, arr.ind = FALSE)
which(list, arr.ind = 0)
doors <- c(rep(1, n_success), rep(0, n_doors - n_success))
which(doors, arr.ind = 0)
which(doors == 0)
a ,- which(doors == 0)
a <- which(doors == 0)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
sample(a, 1)
participant_choice <- 1
available <- doors[-participant_choice]
available <- which(available == 0)
available <- which(doors == 0)
host <- function(doors, participant_choice){
# find doors
available <- which(doors == 0)
if(participant_choice %in% available){
available <- available[-participant_choice]
}
picked <- sample(available, 1)
}
host <- function(doors, participant_choice){
# find doors
available <- which(doors == 0)
if(participant_choice %in% available){
available <- available[-participant_choice]
}
picked <- sample(available, 1)
return(picked)
}
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
participant_choice = 3
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host <- function(doors, participant_choice){
# find doors
available <- which(doors == 0)
if(participant_choice %in% available){
print("True")
available <- available[-participant_choice]
}
picked <- sample(available, 1)
return(picked)
}
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
available <- available[-participant_choice]
available <- available[!=participant_choice]
filter(available, avaiable != 3)
available[lapply(available, participant_choice) !%in%]
available[lapply(available, participant_choice) %!in%]
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
library(brms)
load("models/outputs/brms/Real/place_brms_1")
launch_shinystan(place_brms_1)
rm(list = ls())
#### Parameters ####
n_doors <- 3
n_success <- 1
n_choices <- 10
# make list
doors <- c(rep(1, n_success), rep(0, n_doors - n_success))
participant_choice <- 3
avaiable <- doors[!participant_choice %in% doors]
available <- which(doors == 0)
avaiable <- doors[!participant_choice %in%available]
available <- doors[!participant_choice %in%available]
available <- available[!(participant_choice %in% available)]
available <- available[!(participant_choice %in% available)]
available <- available[!participant_choice %in% available]
available <- which(doors == 0)
x <- seq(0,1,0.01)
y1 <- dbeta(x, 1, 1)
y2 <- dbeta(x, 10, 10)
y3 <- dbeta(x, 1000, 1000)
tibble(x = rep(x, 3),)
tibble(x = rep(x, 3),
y_type = rep(c("constant","broad","uniform")))
library(tidyverse)
tibble(x = rep(x, 3),
y_type = rep(c("constant","broad","uniform")))
tibble(x = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)))
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)))
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1))
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1)) %>%
ggplot(aes(x, y, colour = y_type)) +
geom_line()
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1))
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1)) %>%
ggplot(aes(x_vals, y,
colour = y_type))
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1)) %>%
ggplot(aes(x_vals, y,
colour = y_type)) +
geom_point()
tibble(x_vals = rep(x, 3),
y_type = rep(c("constant","broad","uniform"), each = length(x)),
y = c(y3, y2, y1)) %>%
ggplot(aes(x_vals, y,
colour = y_type)) +
geom_line()
