plt_shaded_mu_beta <- function(data_mu, data_hpdi, data_posterior){
# get mu line
mu_line <- data.frame(group = character(),
x = numeric(),
y = numeric())
# get density profile
for(ii in unique(data_mu$group)){
temp <- filter(data_mu[data_mu$group == ii,])
x <- density(temp$p_mu)$x
y <- density(temp$p_mu)$y
mu_line <- rbind(mu_line, data.frame(group = ii,
x = x,
y = y))
}
# now make plot
plt_shaded_mu <- merge(mu_line, data_hpdi) %>%
mutate(variable = ifelse(x > lower & x < upper, 1, 0))
plt_shaded_mu <- ggplot(data_posterior,
aes(colour = group,
fill = group)) +
geom_line(aes(x, p)) +
geom_area(data = filter(plt_shaded_mu, variable == 1),
position = "dodge",
aes(x = x,
y = y),
alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
scale_x_continuous(limits = c(0.5, 0.9))
plt_shaded_mu$labels$colour <- "Group"
plt_shaded_mu$labels$fill <- "Group"
plt_shaded_mu$labels$x <- "Predicted Accuracy"
plt_shaded_mu$labels$y <- "Density"
plt_shaded_mu
return(plt_shaded_mu)
}
# plt difference for means
plt_diff_beta <- function(mu){
plt_diff <- tibble(control = mu[,1],
motivated = mu[,2],
optimal = mu[,3]) %>%
mutate("Motivated - Control" = motivated - control,
"Optimal - Control" = optimal - control,
"Optimal - Motivated" = optimal - motivated) %>%
select(-control,
-motivated,
-optimal) %>%
gather(key = "Comparison",
value = "Difference") %>%
ggplot(aes(Difference,
colour = Comparison,
fill = Comparison)) +
geom_density(alpha = 0.3) +
geom_vline(xintercept = 0,
linetype = "dashed") +
ggthemes::scale_color_ptol() +
ggthemes::scale_fill_ptol() +
theme_minimal() +
theme(legend.position = "bottom")
# return plt
return(plt_diff)
}
#### NB: need to sort this to be a distribution ####
# post for berno
post_berno <- function(model, x_vals, m_matrix){
post <- rstan::extract(model)
beta <- colMeans(post$beta)
mu <- m_matrix %*% beta
# sort this to be a distribution over x_vals
# ... not sure it will work with this one?
p <- plogis(mu)
return(p)
}
#### PLOTTING MODELS ####
#### BETA ####
# setup effects
X <- tibble(intercept = c(1,1,1),
motivated = c(0,1,0),
optimal = c(0,0,1))
X <- as.matrix(X)
# sequence to estimate likelihood
x_vals <- seq(0,1-0.001,0.001)
#### m1: acc ~ group ####
load("modelling/model_data/beta_1")
load("modelling/model_outputs/m_stan_group_beta_1")
samples <- rstan::extract(m_stan_group)
# plt posterior
plt_posterior <- plt_post_beta(model_data, x_vals, m_stan_group, X)
plt_posterior <- plt_posterior +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
0.8*8
0.8*5
ggsave("../Figures/Model_stan_rawacc.png",
height = 4,
width = 6.4)
load("modelling/model_data/beta_2")
load("modelling/model_outputs/m_stan_group_beta_2")
samples <- rstan::extract(m_stan_group_exp)
# plt posterior
plt_posterior <- plt_post_beta(model_data, x_vals, m_stan_group_exp, X)
plt_posterior <- plt_posterior +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
ggsave("../Figures/Model_stan_expacc.png",
height = 4,
width = 6.4)
0.7*8
0.7*5
ggsave("../Figures/Model_stan_expacc.png",
height = 3.5,
width = 5.6)
samples <- rstan::extract(m_stan_group)
# plt posterior
plt_posterior <- plt_post_beta(model_data, x_vals, m_stan_group, X)
plt_posterior <- plt_posterior +
scale_x_continuous(limits = c(0.5, 0.9)) +
scale_y_continuous(breaks = seq(0,15,5))
plt_posterior
ggsave("../Figures/Model_stan_rawacc.png",
height = 3.5,
width = 5.6)
rm(list = ls())
setwd("F:/Uni/PhD/2nd Year/Ben_data")
dev.off()
setwd("F:/Uni/PhD/2nd Year/Ben_data")
#### plots for Ben ####
# notes
# lines are on a 24x17 grid
#### Library ####
library(tidyverse)
library(brms)
#### functions ####
euc_dist <- function(x){
# convert to matrix 2 x n matrix
x = matrix(x, nrow = 2)
d = 0
for(ii in 1:ncol(x)){
d = d + abs((x[1, ii] - x[2, ii]))^2
}
d = sqrt(d)
return(d)
}
#### constants ####
mid_x <- 24/2
mid_y <- 17/2
#### load in data ####
results_files = dir("data/")
# empty frame
df_all <- data.frame()
for(f in results_files){
d = read.csv(paste("data/", f, sep = ""))
# bind
df_all <- rbind(df_all, d)
}
# tidy
rm(results_files, f, d)
df_all <- df_all %>%
rowwise() %>%
mutate(targ_side = ifelse(targ_x > mid_x, "right", "left"),
targ_homo = ifelse(hetero_side != targ_side | is.na(hetero_side), "t_hom", "t_het"),
fix_side = ifelse(fix_x > mid_x, "right", "left"),
fix_homo = ifelse(hetero_side != fix_side | is.na(hetero_side), "fix_hom", "fix_het"),
euc_dist_fix =  euc_dist(c(fix_x, targ_x,fix_y, targ_y)),
euc_dist_pred = euc_dist(c(targ_x, stimulus_click_x,targ_y, stimulus_click_y)))
# remove unseen trials and calc euclidean dist
df_seen <- df_all %>%
rowwise() %>%
filter(response == 1) %>%
select(-session,
block)
# plot histogram
df_seen %>%
ggplot(aes(euc_dist_pred,
colour = trial_type,
fill = trial_type)) +
geom_histogram(binwidth = 0.5,
position = "dodge") +
theme_minimal() +
facet_wrap(~targ_homo)
#### modelling glm: logistic ####
# recreate Ben's modelling
m1 <- glm(response ~ euc_dist_fix +
fix_x +
trial_type +
targ_homo,
data = df_all,
family = "binomial")
summary(m)
summary(m1)
rm(list = ls())
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
dir()
load("scratch/data/df_Aberdeen_decisions")
View(df_Aberdeen_decisions)
df_Aberdeen_decisions <- df_Aberdeen_decisions %>%
mutate(dist_type = ifelse(delta < median(delta), "close", "far"))
df_agg_p <- df_Aberdeen_decisions %>%
group_by(participant, condition_label, truck_perf, delta, dist_type) %>%
mutate(abs_pos = abs(placed_x)/delta) %>%
summarise(mean_pos = mean(abs_pos),
var_pos = var(abs_pos))
df_agg_p
df_agg_p %>% ggplot(aes(mean_pos, colour = truck_perf, fill = truck_perf)) + geom_density() + facet_grid(dist_type~condition_label)
df_agg_p %>% ggplot(aes(mean_pos, colour = truck_perf, fill = truck_perf)) + geom_density(alpha = 0.3) + facet_grid(dist_type~condition_label)
df_agg_o <- df_agg_p %>%
group_by(condition_label, truck_perf, delta, dist_type) %>%
summarise(n = n(),
position = mean(mean_pos),
variance = mean(var_pos),
se_pos = sd(mean_pos)/sqrt(n),
se_var = sd(var_pos)/sqrt(n))
aov_pos <- aov(data = df_agg_o, position ~ truck_perf * delta * condition_label)
summary(aov_pos)
View(df_Aberdeen_decisions)
plt_mean_pos <- df_agg_o %>%
ggplot(aes(delta, position,
colour = condition_label,
fill = condition_label,
ymin = position - se_pos,
ymax = position + se_pos)) +
geom_line() +
geom_errorbar() +
theme_minimal() +
facet_wrap(~truck_perf)
plt_mean_pos$labels$x <- "Delta (pixels)"
plt_mean_pos$labels$y <- "Normalised Placement"
plt_mean_pos$labsls$colour <- "Condition"
plt_mean_pos$labsls$fill <- "Condition"
plt_mean_pos
rm(list = ls())
#### Load in Data ####
load("scratch/data/df_Aberdeen_decisions")
df_Aberdeen_decisions <- df_Aberdeen_decisions %>%
mutate(dist_type = ifelse(delta < median(delta), "close", "far"))
head(df_Aberdeen_decisions)
head(df_Aberdeen_decisions)
summary(df_Aberdeen_decisions)
temp <- 2
temp
df_Aberdeen_decisions <- df_Aberdeen_decisions %>%
mutate(abs_placement = abs(placed_x))
head(df_Aberdeen_decisions)
temp <- df_Aberdeen_decisions %>%
mutate(abs_placement = abs(placed_x),
normalised_placement = abs_placement/delta)
head(temp)
head(temp)
range(temp$normalised_placement)
temp <- df_Aberdeen_decisions %>%
mutate(abs_placement = abs(placed_x),
normalised_placement = abs_placement/delta) %>%
filter(normalised_placement <= 1)
range(temp$normalised_placement)
2
# 2
df_agg <- df_new %>%
group_by(participant, truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement) # get mean of placement
)
df_new <- df_Aberdeen_decisions %>%
mutate(abs_placement = abs(placed_x), # get absolute values
normalised_placement = abs_placement/delta) %>%  # normalised values
filter(normalised_placement <= 1) # filter values larger than 1
df_agg <- df_new %>%
group_by(participant, truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement)) # get mean of placement
head(df_agg)
plt <- ggplot(df_agg, aes(mean_position, delta))
plt
plt <- ggplot(df_agg, aes(delta, mean_position))
plt
temp <- 2
temp
temp <- temp + 2
temp
plt <- plt + geom_point()
plt
plt <- ggplot(df_agg, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point()
plt
df_agg_p <- df_new %>%
group_by(participant, truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement)) # get mean of placement
summarise(mean_position = mean(normalised_placement)) # get mean of placement
plt <- ggplot(df_agg_p, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point()
head(df_agg_p)
plt <- ggplot(df_agg_p, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point()
plt <- plt + facet_wrap(~condition_label)
plt
plt <- ggplot(df_agg_p, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point(alpha = 0.3)
plt <- plt + facet_wrap(~condition_label)
plt
pos_aov <- aov(data = df_agg_p, mean_position ~ tuck_perf * condition_label * delta)
pos_aov <- aov(data = df_agg_p, mean_position ~ truck_perf * condition_label * delta)
summary(pos_aov)
df_agg_o <- df_new %>%
group_by(truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement)) # get mean of placement
plt <- ggplot(df_agg_o, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point(alpha = 0.3)
plt <- plt + facet_wrap(~condition_label)
plt
plt <- ggplot(df_agg_o, aes(delta, mean_position, colour = truck_perf))
plt <- plt + geom_point()
plt <- plt + facet_wrap(~condition_label)
plt
plt <- ggplot(df_agg_o, aes(delta, mean_position, colour = truck_perf))
# draw points
plt <- plt + geom_point()
# add line
plt <- plt + geom_line()
# wrap by condition
plt <- plt + facet_wrap(~condition_label)
plt
plt <- ggplot(df_agg_o, aes(delta, mean_position, colour = truck_perf))
# draw points
plt <- plt + geom_point()
# add line
# plt <- plt + geom_line()
# line of best fit
plt <- plt + geom_smooth(method = "lm")
# wrap by condition
plt <- plt + facet_wrap(~condition_label)
plt
summary(pos_aov)
plt <- ggplot(df_agg_o, aes(delta, mean_position, colour = truck_perf))
# draw points
plt <- plt + geom_point()
# add line
# plt <- plt + geom_line()
# line of best fit
plt <- plt + geom_smooth(method = "lm", se = F)
# wrap by condition
plt <- plt + facet_wrap(~condition_label)
plt
pos_aov_o <- aov(data = df_agg_o, mean_position ~ truck_perf * condition_label * delta)
summary(pos_aov)
summary(pos_aov_o)
# plot data
# setup plot space
plt <- ggplot(df_agg_p, aes(delta, mean_position, colour = truck_perf))
# add in points
plt <- plt + geom_point(alpha = 0.3)
# split by condition
plt <- plt + facet_wrap(~condition_label)
plt
a <- c(1,2,3,4)
a
a %>% n()
df_agg_o <- df_new %>%
group_by(truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement),
n = n(),
se_pos = sd(mean_postion)/sqrt(n))
df_agg_o <- df_new %>%
group_by(truck_perf, condition_label, delta) %>% # group data by these columns
summarise(mean_position = mean(normalised_placement),
n = n(),
se_pos = sd(normalised_placement)/sqrt(n))
View(df_agg_p)
View(df_agg_o)
plt <- ggplot(df_agg_o, aes(delta,
mean_position,
colour = truck_perf,
ymin = mean_position - se_pos,
ymax = mean_position + se_pos))
# draw points
plt <- plt + geom_point()
# add line
plt <- plt + geom_line()
# line of best fit
# plt <- plt + geom_smooth(method = "lm", se = F)
# add error bars
plt <- plt + geom_errorbar()
# wrap by condition
plt <- plt + facet_wrap(~condition_label)
plt
setwd("E:/Github/Avatar_Certainty/Analysis")
#### 10_summary_script ####
# sort out some more straightforward analysis
# for the AVATAR experiment
#### Library ####
library(betareg)
library(brms)
library(lme4)
library(rstan)
library(tidyverse)
library(tidybayes)
#### Constants ####
#### Functions ####
#### Load in Data ####
load("scratch/data/df_Aberdeen_decisions")
df_Aberdeen_decisions <- df_Aberdeen_decisions %>%
mutate(dist_type = ifelse(delta < median(delta), "close", "far"))
df_agg_p <- df_Aberdeen_decisions %>%
group_by(participant, condition_label, truck_perf, delta, dist_type) %>%
mutate(abs_pos = abs(placed_x)/delta) %>%
summarise(mean_pos = mean(abs_pos),
var_pos = var(abs_pos))
# overall
df_agg_o <- df_agg_p %>%
group_by(condition_label, truck_perf, delta, dist_type) %>%
summarise(n = n(),
position = mean(mean_pos),
variance = mean(var_pos),
se_pos = sd(mean_pos)/sqrt(n),
se_var = sd(var_pos)/sqrt(n))
# so take this with a pinch of salt
aov_pos <- aov(data = df_agg_p, position ~ truck_perf * delta * condition_label +
Error(participant/(truck_perf * delta)) + condition_label)
aov_pos <- aov(data = df_agg_p, mean_pos ~ truck_perf * delta * condition_label +
Error(participant/(truck_perf * delta)) + condition_label)
summar(aov_pos)
summary(aov_pos)
load("scratch/data/df_Aberdeen_decisions")
df_Aberdeen_decisions <- df_Aberdeen_decisions %>%
mutate(dist_type = ifelse(delta < median(delta), "close", "far"),
participant = as.factor(participant))
head(df_agg_p)
# so take this with a pinch of salt
aov_pos <- aov(data = df_agg_p, mean_pos ~ truck_perf * dist_type * condition_label +
Error(participant/(truck_perf * dist_type)) + condition_label)
summary(aov_pos)
head(df_agg_p)
df_agg_p <- df_Aberdeen_decisions %>%
group_by(participant, condition_label, truck_perf, delta, dist_type) %>%
mutate(abs_pos = abs(placed_x)/delta) %>%
summarise(mean_pos = mean(abs_pos),
accuracy = mean(success),
var_pos = var(abs_pos))
head(df_agg_p)
df_agg_p <- df_Aberdeen_decisions %>%
group_by(participant, condition_label, truck_perf, dist_type) %>%
mutate(abs_pos = abs(placed_x)/delta) %>%
summarise(mean_pos = mean(abs_pos),
accuracy = mean(success),
var_pos = var(abs_pos))
head(df_agg_p)
aov_pos <- aov(data = df_agg_p, mean_pos ~ truck_perf * dist_type * condition_label +
Error(participant/(truck_perf * dist_type)) + condition_label)
summary(aov_pos)
df_agg_p %>%
select(-var_pos,
-accuracy) %>%
mutate(delta = round(delta)) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_pos)
df_agg_p %>%
select(-var_pos,
-accuracy)
df_agg_p %>%
select(-var_pos,
-accuracy) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value, mean_pos)
head(df_agg_p)
df_agg_p %>%
unite("value",
truck_perf:dist_type) %>%
spread(value,
accuracy)
df_agg_p %>%
select(-var_pos,
-mean_pos) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value,
accuracy)
SPSS_acc <- df_agg_p %>%
select(-var_pos,
-mean_pos) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value,
accuracy)
write.csv(SPSS_acc, file = "scratch/data/SPSS_accuracy.txt", row.names = F)
SPSS_mean <- df_agg_p %>%
select(-var_pos,
-accuracy) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value, mean_pos)
write.csv(SPSS_mean, file = "scratch/data/SPSS_mean_Aberdeen.txt", row.names = F)
aov_acc <- aov(data = df_agg_p, accuracy ~ truck_perf * dist_type * condition_label +
Error(participant/(truck_perf * dist_type)) + condition_label)
summary(aov_acc)
SPSS_mean <- df_agg_p %>%
select(-var_pos,
-accuracy) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value, mean_pos)
SPSS_acc <- df_agg_p %>%
select(-var_pos,
-mean_pos) %>%
unite("value",
truck_perf:dist_type) %>%
spread(value,
accuracy)
# save file
write.csv(SPSS_mean, file = "scratch/data/SPSS_mean_Aberdeen.txt", row.names = F)
write.csv(SPSS_acc, file = "scratch/data/SPSS_accuracy.txt", row.names = F)
