for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
#### Moving truck ####
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = spread)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~skew)
ggplot(aes(x = seq(0,1,0.01), y =  dbeta(x, 3,3))) + geom_line()
ggplot(data = data.frame(x = seq(0,1,0.01), y =  dbeta(x, 3,3)), aes(x,y)) + geom_line()
head(beta)
head(betas)
distr_plots <- data.frame(x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(round(x*max_speed)+1,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew, fill = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
distr_plots <- data.frame(skew = character(),
spread = character(),
x = numeric(),
y = numeric())
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
# make plots of this
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
mean(1,2,3)
mean(c(1,2,3))
first <- mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(first, second)
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
mean(first, second)
(first + second)/2
mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
0.75
a <- 0.75
a <- 0.63
b <- 0.33
mean(a, b)
(a + b)/2
(0.3333333333333333333333 + 0.63333333333333333333333333333)/2
(0.3333333333333333333333 + 0.6666666666666666666666666)/2
rm(list = ls())
(155.16*4) + 72.93 + 343.62 + 181.4
condition <- rep(c("truck", "avatar"), each = 33)
order <- rep(c("const-var", "var-const"), 33)
estimate <- rep(c("confidence", "freq"), each = 2, 33)
estimate <- rep(c("confidence", "freq"), each = 2, 11)
estimate <- rep(c("confidence", "freq"), each = 2, 22)
estimate <- rep(c("confidence", "freq"), each = 2, 15)
estimate <- rep(c("confidence", "freq"), each = 2, 16)
estimate <- rep(c("confidence", "freq"), each = 2, 17)
estimate <- rep(c("confidence", "freq"), each = 2)
estimate <- rep(c("confidence", "freq"), each = 2, 11)
estimate <- rep(c("confidence", "freq"), each = 2, 6)
estimate <- rep(c("confidence", "freq"), each = 2, 5)
estimate <- rep(c("confidence", "freq"), each = 3, 10)
estimate <- rep(c("confidence", "freq"), each = 3, 11)
temp <- cbind(condition, estimate, order)
View(temp)
estimate <- rep(c("confidence", "freq"), each = 2, 11)
estimate <- rep(c("confidence", "freq"), each = 2, 15)
estimate <- rep(c("confidence", "freq"), each = 2, 16)
estimate <- rep(c("confidence", "freq"), each = 2, 17)
temp <- cbind(condition, estimate, order)
estimate <- rep(c("confidence", "freq"), each = 11, 3)
temp <- cbind(condition, estimate, order)
View(temp)
counter_balance <- cbind(condition, order, estimate)
rm(temp)
counter_balance[,3]
counter_balance[3,]
counter_balance$num <- row.names(counter_balance)
View(counter_balance)
counter_balance <- cbind(condition, order, estimate)
counter_balance <- as.data.frame(counter_balance)
counter_balance$num <- row.names(counter_balance)
View(counter_balance)
counter_balance$session <- 1
counter_balance$session[counter_balance$num > 21] <- 2
counter_balance$session[counter_balance$num > 43] <- 3
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
library(tidyverse)
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
condition <- rep(c("truck", "avatar"), each = 30)
order <- rep(c("const-var", "var-const"), 30)
estimate <- rep(c("confidence", "freq"), each = 10, 3)
# dataset
counter_balance <- cbind(condition, order, estimate)
counter_balance <- as.data.frame(counter_balance)
# add in session details
counter_balance$num <- row.names(counter_balance)
counter_balance$session <- 1
counter_balance$session[counter_balance$num > 21] <- 2
counter_balance$session[counter_balance$num > 43] <- 3
# check how balanced this is
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
estimate <- rep(c("confidence", "freq"), each = 2, 10)
estimate <- rep(c("confidence", "freq"), each = 2, 15)
counter_balance <- cbind(condition, order, estimate)
counter_balance <- as.data.frame(counter_balance)
# add in session details
counter_balance$num <- row.names(counter_balance)
counter_balance$session <- 1
counter_balance$session[counter_balance$num > 21] <- 2
counter_balance$session[counter_balance$num > 43] <- 3
# check how balanced this is
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
counter_balance$num <- row.names(counter_balance)
counter_balance$session <- 1
counter_balance$session[counter_balance$num > 19] <- 2
counter_balance$session[counter_balance$num > 39] <- 3
# check how balanced this is
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
counter_balance <- cbind(condition, order, estimate)
counter_balance <- as.data.frame(counter_balance)
# add in session details
counter_balance$num <- row.names(counter_balance)
counter_balance$session <- 1
counter_balance$session[counter_balance$num > 19] <- 2
counter_balance$session[counter_balance$num > 39] <- 3
# check how balanced this is
counter_balance %>%
group_by(session, order, estimate, condition) %>%
summarise(n = n())
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
library(tidyverse)
library(ggthemes)
load("scratch/data/df_Aberdeen_decisions")
head(df_Aberdeen_decisions)
dir("data/")
dir("data/Aberdeen")
results_files <- dir("data/Aberdeen/Demographics/")
temp_df <- readMat("data/Aberdeen/Demographics/31_demo.mat")
library(R.matlab)
temp_df <- readMat("data/Aberdeen/Demographics/31_demo.mat")
temp_df$age
temp_df$gender
a <- temp_df$gender
a
a <- temp_df$gender[1]
df_Aberdeen_demographics <- data.frame(participant = character(),
age = numeric(),
gender = numeric())
# set path
results_files <- dir("data/Aberdeen/Demographics/")
# setup data_frame
df_Aberdeen_demographics <- data.frame(participant = character(),
age = numeric(),
gender = numeric())
# loop throuh and read in data
for(f in unique(results_files)){
# read in file
temp_df <- readMat(paste("data/Aberdeen/Demographics/", f, sep = ""))
# get participant name
Participant <- strsplit(f, '[_.]')[[1]]
Participant <- Participant[1]
# age
age <- as.numeric(temp_df$age[1])
# gender
gender <- temp_df$gender[1]
# fill data frame
# demographics
df_Aberdeen_demographics <- rbind(df_Aberdeen_demographics, data.frame(participant = Participant,
age = age,
gender = gender))
}
# save this
save(df_Aberdeen_demographics, file = "scratch/data/df_Aberdeen_demographics")
View(df_Aberdeen_demographics)
rm(list =ls())
load("scratch/data/df_Aberdeen_decisions")
# load demographics
load("scratch/data/df_Aberdeen_demographics")
avg_age <- mean(df_Aberdeen_demographics$age)
avg_age <- round(mean(df_Aberdeen_demographics$age), digits = 3)
avg_age <- round(mean(df_Aberdeen_demographics$age), digits = 1)
age_avg <- round(mean(df_Aberdeen_demographics$age), digits = 1)
age_max <- max(df_Aberdeen_demographics$age)
age_min <- min(df_Aberdeen_demographics$age)
Num_participants <- length(unique(df_Aberdeen_decisions$participant))
Num_participants
df_Aberdeen_demographics %>%
group_by(gender) %>%
summarise(n = n())
unique(df_Aberdeen_demographics$gender)
df_Aberdeen_demographics$gender <- tolower(df_Aberdeen_demographics$gender)
View(df_Aberdeen_demographics)
df_Aberdeen_demographics$gender[df_Aberdeen_demographics$gender == "f"] <- "female"
View(df_Aberdeen_demographics)
df_Aberdeen_demographics %>%
group_by(gender) %>%
summarise(n = n())
num_f <- df_Aberdeen_demographics %>%
group_by(gender) %>%
summarise(n = n())
num_f <- num_f$n[num_f$gender == "female"]
dir()
dir("../")
dir("../Write_up")
dir("../Write_up/Figures")
