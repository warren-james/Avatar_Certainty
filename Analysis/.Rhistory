white_pop <- 0.72
black_pop <- 0.26
white_vote_M <- 0.67
black_vote_M <- 0.04
white_vote_J <- 0.31
black_vote_J <- 0.96
M_votes <- (white_pop*white_vote_M)+(black_pop*black_vote_M)
J_votes <- (white_pop*white_vote_J)+(black_pop*black_vote_J)
total_days = 2
cost_per_day = 1
person_a = 2
person_b = 1
total_cost = total_days*cost_per_day
person_a_days = total_days
person_b_days = total_days - 1
all_days = person_a_days + person_b_days
a_owes = total_cost*(person_a_days/total_days)
a_owes = total_cost*(person_a_days/all_days)
b_owes = total_cost*(person_b_days/all_days)
shared_days = min(person_a_days, person_b_days)
shared_days = total_days - min(person_a_days, person_b_days)
rm(shared_days)
shared_days = total_days - min(person_a_days, person_b_days)
cost_shared_days = (shared_days/total_days)*total_cost
rm(list = ls())
total_days = 2
cost_per_day = 1
person_a = 2
person_b = 1
# The way I have done it
total_cost = total_days*cost_per_day
person_a_days = total_days
person_b_days = total_days - 1
all_days = person_a_days + person_b_days
a_owes = total_cost*(person_a_days/all_days)
b_owes = total_cost*(person_b_days/all_days)
shared_days = total_days - min(person_a_days, person_b_days)
cost_shared_days = (shared_days/total_days)*total_cost
person_a_unique_days = person_a_days-shared_days
person_b_unique_days = person_b_days-shared_days
cost_people_shared_days = cost_shared_days/lenght(c(person_a,person_b))
cost_people_shared_days = cost_shared_days/length(c(person_a,person_b))
remaining_cost = total_cost - cost_shared_days
person_a_cost = cost_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
total_days-shared_days
person_a_unique_days
remaining_cost
cost_shared_days
person_a_cost = cost_people_shared_days + remaining_cost/(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost/(person_b_unique_days/(total_days-shared_days))
person_b_unique_days
total_days-shared_days
0/1
person_a_cost = cost_people_shared_days + remaining_cost*(person_a_unique_days/(total_days-shared_days))
person_b_cost = cost_people_shared_days + remaining_cost*(person_b_unique_days/(total_days-shared_days))
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
rm(list = ls())
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks = (total_cost*(shared_weeks/total_weeks))/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
remaining_weeks_1 = total_weeks- shared_weeks
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
total_cost - (total_cost*(shared_weeks/total_weeks))*length(c(weeks_w, weeks_k, weeks_j, weeks_l))
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remainig_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
remaining_cost = total_cost - cost_shared_weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_week_1)
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + (total_cost - (cost_shared_weeks_pp + cost_shared_weeks_2_pp))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
# tidy
rm(cost_shared_weeks, cost_shared_weeks_2, cost_shared_weeks_2_pp, cost_shared_weeks_pp,
fst_remaining_weeks_j, fst_remaining_weeks_k, fst_remaining_weeks_l, fst_remaining_weeks_w,
remainig_cost, remaining_cost, remaining_cost_2, remaining_weeks_1, remaining_weeks_2,
shared_weeks, shared_weeks_2,
total_cost, total_weeks,
weeks_j, weeks_k, weeks_l, weeks_w)
# options
options(digits = 5)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas = (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (113 * 0.25)
elec = ((elec_current - elec_previous) * 0.1586) + (113 * 0.18)
VAT = 0.05
total_cost = gas + elec + (gas + elec)*VAT
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 2
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
#### THIS DOESN'T WORK #####
# let's work it out properly
# tidy first
rm(VAT,elec,elec_current,elec_previous,gas,gas_current,gas_previous)
rm(all_weeks, total_owed)
temp_w = (total_cost/4)*(10/12)
temp_l = (total_cost/4)*(10/12)
temp_k = (toal_cost/4)*(11/12)
temp_k = (total_cost/4)*(11/12)
temp_k = ((total_cost-temp_w-temp_l)/4)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)*(1/2)
temp_k = ((total_cost-temp_w-temp_l)/2)
new_cost = total_cost -temp_w - temp_l
temp_k = (new_cost/2)*0.5
temp_k = (new_cost/2)*(1/3)
temp_k = (new_cost/2)*(11/12)
temp_k = (new_cost/2)*(1/2)
(2/2)*(1/2)
temp_w2 = (total_cost)*(10/(10+10+11+12))
temp_k = (total_cost/4)*(11/12)
weeks_w = total_weeks - 2
weeks_k = total_weeks - 1
weeks_j = total_weeks
weeks_l = total_weeks - 2
# total shared weeks
shared_weeks = min(weeks_w, weeks_k, weeks_j, weeks_l)
remaining_weeks_1 = total_weeks- shared_weeks
# everyone's cost for those shared weeks
cost_shared_weeks = total_cost*(shared_weeks/total_weeks)
cost_shared_weeks_pp = cost_shared_weeks/length(c(weeks_w, weeks_k, weeks_j, weeks_l))
remaining_cost = total_cost - cost_shared_weeks
# Is there a unique one left?
fst_remaining_weeks_w = weeks_w - shared_weeks
fst_remaining_weeks_k = weeks_k - shared_weeks
fst_remaining_weeks_j = weeks_j - shared_weeks
fst_remaining_weeks_l = weeks_l - shared_weeks
# can work out the people with only shared days now
w_owes_2 = cost_shared_weeks_pp
l_owes_2 = cost_shared_weeks_pp
# don't worry about working out those with 0
shared_weeks_2 = min(fst_remaining_weeks_j, fst_remaining_weeks_k)
remaining_weeks_2 = remaining_weeks_1 - shared_weeks_2
# now get the cost of the new shared weeks
cost_shared_weeks_2 = remaining_cost*(shared_weeks_2/remaining_weeks_1)
cost_shared_weeks_2_pp = cost_shared_weeks_2/length(c(fst_remaining_weeks_k,fst_remaining_weeks_j))
remaining_cost_2 = remaining_cost-cost_shared_weeks_2
k_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp
j_owes_2 = cost_shared_weeks_pp + cost_shared_weeks_2_pp + remaining_cost_2
temp_w = (total_cost/4) * (10/12)
library(tidyverse)
library(rethinking)
dat <- data.frame(x = beta(100, 3, 1.8))
dat <- data.frame(x = beta(100, 3, 1.8))
dat <- data.frame(x = rbeta(100, 3, 1.8))
dat
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
head(dat)
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
View(dat)
m <- map2stan(
alist(
x ~ dbetabinom(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
m <- map2stan(
alist(
x ~ dbeta2(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
install.packages(c("backports", "bayesplot", "BH", "bindr", "bindrcpp", "brms", "Brobdingnag", "broom", "callr", "caTools", "clipr", "curl", "DBI", "dbplyr", "devtools", "digest", "dplyr", "DT", "dygraphs", "evaluate", "forcats", "ggplot2", "ggthemes", "git2r", "glue", "gtools", "haven", "highr", "hms", "htmlwidgets", "httpuv", "igraph", "inline", "installr", "knitr", "lme4", "loo", "lubridate", "matrixStats", "miniUI", "modelr", "munsell", "mvtnorm", "nleqslv", "openssl", "packrat", "plogr", "psych", "purrr", "R.oo", "Rcpp", "RcppEigen", "RCurl", "readxl", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "rsconnect", "rstan", "rstantools", "selectr", "shiny", "shinystan", "sourcetools", "StanHeaders", "stringi", "stringr", "tibble", "tidyr", "tidyselect", "viridisLite", "withr", "xml2", "xts", "yaml", "zoo"))
library(tidyverse)
library(rethinking)
# simulate some proportion data
dat <- data.frame(x = rbeta(100, 3, 1.8))
# fit Beta distributon to data
m <- map2stan(
alist(
x ~ dbeta(shape1, shape2),
shape1 ~ dcauchy(0,1),
shape2 ~ dcauchy(0,1)),
data = dat)
summary(m)
n_samples = 100
post <- extract.samples(m, n_samples)
x <- seq(0,1, 0.01)
y <- dbeta(seq(0,1, 0.01), shape1 = 2, shape2 = 2)
p <- unlist(map2(post$shape1, post$shape2, dbeta, x  = x ))
n <- rep(1:n_samples, each = length(x))
fits <- tibble(x = rep(x, n_samples), p , n = n)
post <- extract.samples(m)
mu <- HPDI(with(post, shape1 / (shape1 + shape2), prob = 0.99))
plt <- ggplot()
plt <- plt + geom_density(data = dat,aes(x = dat$x), fill = "#ec9844", colour = "#ec9844", adjust = 1/2)
plt <- plt + geom_rect(aes(xmin = mu[1], xmax = mu[2], ymin = 0, ymax = Inf), fill = "blue", alpha = 0.3)
plt <- plt + geom_path(data = fits, aes(x = x, y = p, group = n), alpha = 0.1, size = 1)
plt <- plt + scale_x_continuous("proporiton", expand = c(0,0))
plt <- plt + scale_y_continuous("density", expand = c(0,0), limits = c(0, 2))
plt <- plt + theme_bw()
plt
n = 1000
dat <- data.frame(
x = c(rbeta(n, 3, 2), rbeta(n, 1, 2)),
z = rep(0:1, each = n))
plt <- ggplot(dat)
plt <- plt + geom_density(
aes(x = dat$x, fill = as.factor(dat$z)), adjust = 1/2)
plt
head(dat)
setwd("E:/Github/Avatar_Certainty/Analysis")
library(tidyverse)
library(ggthemes)
load("scratch/data/df_Essex_decisions")
df_decisions <- as.tibble(df_Essex_decisions)
# compute mean and var for each person and condition
(df_decisions %>%
select(participant, truck_perf, delta, placed_x) %>%
mutate(norm_dist = abs(placed_x / delta)) %>%
group_by(participant, truck_perf, delta) %>%
summarise(
mean_position = mean(norm_dist),
var_dist = var(norm_dist))) -> df
plt <- ggplot(df, aes(x = delta, y = mean_position, colour = truck_perf))
plt <- plt + geom_path(aes(group = participant), alpha = 0.33)
plt <- plt + geom_smooth(se = FALSE, size = 3)
plt <- plt + scale_colour_viridis_d(end = 0.5)
plt
# now aggregate to compute mean of means and related standard error
(df %>%
group_by(truck_perf, delta) %>%
summarise(
n = n(),
position = mean(mean_position),
std_err_p = sd(mean_position)/ sqrt(n),
variance = mean(var_dist),
std_err_v = sd(var_dist)/ sqrt(n))) -> df2
position_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(position_aov)
variance_aov <- aov(data = df2, position ~ truck_perf * delta)
summary(variance_aov)
# plot how mean position varies with delta and condition
plt_mean <- ggplot(df2, aes(
x = delta,
y = position,
ymin = position - 1.96 * std_err_p,
ymax = position + 1.96 * std_err_p,
colour = truck_perf))
plt_mean <- plt_mean + geom_errorbar(colour = "gray") + geom_path()
plt_mean <- plt_mean + scale_y_continuous(limits = c(0, 1), expand = c(0, 0))
plt_mean <- plt_mean + scale_x_continuous(breaks = unique(df$delta))
plt_mean <- plt_mean + theme_bw()
plt_mean
# plot how variance position varies with delta and condition
plt <- ggplot(df2, aes(
x = delta,
y = variance,
ymin = variance - 1.96 * std_err_v,
ymax = variance + 1.96 * std_err_v,
colour = truck_perf))
plt <- plt + geom_errorbar(colour = "gray") + geom_path()
plt <- plt + scale_y_continuous(expand = c(0, 0))
plt <- plt + scale_x_continuous(breaks = unique(df$delta))
plt <- plt + scale_colour_ptol()
plt <- plt + theme_bw()
plt$labels$x <- "Delta (in pixels)"
plt$labels$y <- "Variance"
plt$labels$colour <- "Performance Condition"
plt
# anovas
pos_aov <- aov(data = df2, position ~ truck_perf * delta)
var_aov <- aov(data = df2, variance ~ delta * truck_perf)
#### SPSS data ####
# sort mean pos
SPSS_mean <- df %>%
group_by(participant) %>%
mutate(mean_position = round(mean_position, digits = 3)) %>%
select(-var_dist) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_position)
SPSS_var <- df %>%
group_by(participant) %>%
select(-mean_position) %>%
unite("value",
truck_perf:delta) %>%
spread(value, var_dist)
head(df_decisions)
head(df_Essex_decisions)
df %>%
group_by(participant, condition, delta) %>%
ggplot(aes(rt, colour = condition, fill = condition)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_rt <- df_Essex_decisions %>%
group_by(participant, condition, delta) %>%
ggplot(aes(rt, colour = condition, fill = condition)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_rt
df_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
ggplot(aes(rt, colour = truck_perf, fill = condition)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_rt
df_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_rt
df_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt))
df_rt
df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt)) %>%
ggplot(aes(rt, fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt)) %>%
ggplot(aes(mean_rt, fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt)) %>%
mutate()
df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt))
df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
# ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
# geom_density(alpha = 0.3) +
# facet_wrap(~delta)
summarise(mean_rt = mean(rt)) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_rt)
plt_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt)) %>%
ggplot(aes(rt, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
plt_rt
plt_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt)) %>%
ggplot(aes(mean_rt, colour = delta, fill = delta)) +
geom_density(alpha = 0.3) +
facet_wrap(~truck_perf)
plt_rt
plt_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt)) %>%
mutate(delta = as.factor(delta)) %>%
ggplot(aes(mean_rt, colour = delta, fill = delta)) +
geom_density(alpha = 0.3) +
facet_wrap(~truck_perf)
plt_rt
plt_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt)) %>%
mutate(delta = as.factor(delta)) %>%
ggplot(aes(mean_rt, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~delta)
plt_rt
View(df2)
head(df)
rt_aov <- aov(data = df_rt, rt ~ truck_perf * delta)
head(df_rt)
df_rt2 <- df_Essex_decisions %>%
group_by(truck_perf, delta) %>%
summarise(mean_rt = mean(rt))
rt_aov <- aov(data = df_rt2, rt ~ truck_perf * delta)
View(pos_aov)
View(df2)
head(df2)
aov(lm(rt ~ truck_perf * delta, data = df_rt2))
aov(data = df2, position ~ truck_perf * delta)
aov(data = df_rt2, rt ~ delta * truck_perf)
head(df2)
head(df_rt2)
df_rt2 <- df_Essex_decisions %>%
group_by(truck_perf, delta) %>%
summarise(mean_rt = mean(rt),
n = n())
aov(data = df_rt2, rt ~ delta * truck_perf)
aov(data = df_rt2, df_rt2$rt ~ df_rt2$delta * df_rt2$truck_perf)
aov(data = df_rt2, mean_rt ~ delta * truck_perf)
rt_aov <- aov(data = df_rt2, mean_rt ~ delta * truck_perf)
summary(rt_aov)
aov(data = df_Essex_decisions, rt ~ delta * truck_perf)
summary(aov(data = df_Essex_decisions, rt ~ delta * truck_perf))
rt_aov <- aov(data = df_rt, mean_rt ~ delta * truck_perf)
summary(rt_aov)
View(df)
View(SPSS_mean)
temp <-  df %>%
group_by(participant, truck_perf, delta) %>%
mutate(mean_position = round(mean_position, digits = 3)) %>%
select(-var_dist) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_position)
View(temp)
View(df_rt)
df_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt)) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_rt)
write.csv(df_rt, file = "scratch/data/SPSS_rt.txt", row.names = F)
df_rt <- df_Essex_decisions %>%
group_by(participant, truck_perf, delta) %>%
summarise(mean_rt = mean(rt))
SPSS_rt <- df_rt %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_rt)
write.csv(SPSS_rt, file = "scratch/data/SPSS_rt.txt", row.names = F)
SPSS_rt <- df_rt %>%
mutate(mean_rt = round(mean_rt, digits = 3)) %>%
unite("value",
truck_perf:delta) %>%
spread(value, mean_rt)
View(SPSS_rt)
write.csv(SPSS_rt, file = "scratch/data/SPSS_rt.txt", row.names = F)
