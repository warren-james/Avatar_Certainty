str_extract(string, "\\-*\\d+\\.*\\d*")
}
# proportion of votes
be %>%
ggplot(aes(Share,
colour = Party,
fill = Party)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
position = "dodge") +
geom_density(alpha = .1) +
theme_bw() +
scale_fill_manual(values = p_colours) +
scale_colour_manual(values = p_colours) +
facet_wrap(~Party, scales = "free")
p_colours <- c("lightblue",
"blue",
"green",
"red",
"orange",
"yellow")
# proportion of votes
be %>%
ggplot(aes(Share,
colour = Party,
fill = Party)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
position = "dodge") +
geom_density(alpha = .1) +
theme_bw() +
scale_fill_manual(values = p_colours) +
scale_colour_manual(values = p_colours) +
facet_wrap(~Party, scales = "free")
(0.66 * 2500) + (0.33 * 2400)
(0.66 * 2500) + (0.33 * 2400) + (0.01 *0)
n = 72
x <- seq(0,n,1)
y <- dbinom(x, n, prob = .5)
df_raw <- tibble(x = x/n,
y = y)
df_raw %>%
ggplot(aes(x, y)) +
geom_line()
library(tidyverse)
x <- seq(0,n,1)
y <- dbinom(x, n, prob = .5)
df_raw <- tibble(x = x/n,
y = y)
df_raw %>%
ggplot(aes(x, y)) +
geom_line()
View(df_raw)
0.33 * 2500
0.24 * 2400
rnorm(10, mean = 0, sd = 1)
a <- rnorm(10, mean = 0, sd = 1)
b <- rnorm(10, mean = 2, sd = 1)
t.test(a ~ b)
t.test(a, b)
t.test(a ~ b) -> test
t.test(a,b) -> test
test$p.value
groups <- c("a","b")
length(groups)
tibble(obs = rnorm(10))
temp <- as.tibble(obs = rnorm(10))
temp <- tibble(obs = rnorm(10))
df <- tibble(iter = numeric(),
n = numeric(),
draw = numeric(),
group = character(),
value = numeric())
library(tidyverse)
temp <- tibble(obs = rnorm(10))
head(temp)
n = 1
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
# group descriptives
group_a_mu <- 1
group_b_mu <- 2
group_a_sd <- 1
group_b_sd <- 1
n_subj <- seq(1, 30, 1) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
head(temp)
n = 10
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n))
head(temp)
View(temp)
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
iter = 1
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
head(temp)
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
}
}
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
group_a_mu <- 1
group_b_mu <- 2
group_a_sd <- 1
group_b_sd <- 1
# other parameters
n_subj <- seq(1, 30, 2) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
head(df)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(sd))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit()
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit() %>%
gather(mu:sd,
key = "measure",
value = "value")
n_subj <- seq(5, 30, 5) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value")
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure, n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure ~ n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_wrap(~n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = m,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = n,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .2) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .2) +
facet_wrap(~n)
#### Monty Hall simulation ####
# need to simulate a series of decisions and when switching is good
#### library ####
library(tidyverse)
#### Functions ####
# make the host
# the host should find the 0's and select one of those doors
host <- function(doors, participant_choice){
# find doors
doors <- tibble(doors = doors,
idx = seq(1,3,1))
available <- which(doors == 0)
if(participant_choice %in% available){
print("True")
available <- available[-participant_choice]
}
picked <- sample(available, 1)
return(picked)
}
#### Parameters ####
n_doors <- 3
n_success <- 1
n_choices <- 10
# make list
doors <- c(rep(1, n_success), rep(0, n_doors - n_success))
participant_choice = 3
available <- which(doors == 0)
available[available != 3]
host <- function(doors, participant_choice){
# find doors
available <- which(doors == 0)
if(participant_choice %in% available){
print("True")
available <- available[available != 3]
}
picked <- sample(available, 1)
return(picked)
}
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
host(doors, participant_choice)
available <- which(doors == 0)
if(participant_choice %in% available){
print("True")
available <- available[available != 3]
}
avaialable
available
sample(available,1)
sample(available,1)
sample(available,1)
sample(available,1)
sample(available,1)
sample(available,1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
sample(c(available),1)
available <- which(doors == 0)
if(participant_choice %in% available){
print("True")
available <- available[available != participant_choice]
}
#### Looking at chaos ####
# This is from Veritasium's video:
# https://www.youtube.com/watch?v=ovJcsL7vyrk
# more specifically... this is called bifurification
# The formula is
# X(n + 1) = rX(n)(1-X(n))
# where X is some population value
# This is a percentage of the theoretical maximum
# n just signifies what year it is
# r tells us the growth rate
# So X(n + 1) is what the population will be next year
# so let's mess about with some values
#### library ####
library(tidyverse)
#### functions ####
world_changer <- function(r, X){
# returns a vector for a data frame
value <- r * X * (1-X)
return(value)
}
# this version "should" allow for growth rates > 4
# however, the output is on a log scale
# so keep that in mind
world_changer_mk2 <- function(r, X){
value <- X * exp(r*(1-X))
return(value)
}
#### How we expect things ####
# say we have X (.4 of theoretical maximum) number of rabits this year
# they double in size each year (r = 2)...
# how does this change over time?
# setup some parameters
r <- seq(0.5, 3.5,.5)#seq(1,3,.5)
X <- seq(0.1, .9, 0.1)
n <- 28
df_pop <- tibble(n = numeric(),
r = numeric(),
init_pop = numeric(),
cur_pop = numeric())
for(R in r){
for(x in X){
init_pop <- x
for(ii in 0:n){
if(ii == 0){
cur_pop <- init_pop
} else {
cur_pop <- world_changer(R, cur_pop)
}
df_pop <- rbind(df_pop, tibble(n = ii,
r = R,
init_pop = init_pop,
cur_pop = cur_pop))
}
}
}
df_pop %>%
mutate(init_pop = as.factor(init_pop),
r = as.factor(r)) %>%
ggplot(aes(n, cur_pop,
colour = init_pop)) +
geom_point() +
geom_line() +
facet_wrap(~r)
r <- seq(0.5, 4, .01)
X <- .5
n <- 30
df_pop <- tibble(n = numeric(),
r = numeric(),
init_pop = numeric(),
cur_pop = numeric())
count <- 0
for(rate in r){
init_pop <- X
for(ii in 0:n){
if(ii == 0){
cur_pop <- init_pop
} else {
cur_pop <- world_changer(rate, cur_pop)
}
df_pop <- rbind(df_pop, tibble(n = ii,
r = rate,
init_pop = init_pop,
cur_pop = cur_pop))
}
count <- count + 1
print(paste(round((count/length(r))*100, digits = 3), "%", sep = ""))
}
df_pop %>%
mutate(R = as.factor(rate)) %>%
filter(n >20) %>%
ggplot(aes(r, cur_pop)) +
geom_point(size = .05,
colour = "white") +
# geom_line(aes(group = n),
#           size = .1,
#           colour = "white") +
see::theme_abyss()# + scale_x_continuous(limits = c(3.9,4))
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
load("scratch/data/df_Aberdeen_demographics")
head(df_demo)
head(df_demographics)
head(df_Aberdeen_demographics)
summary(df_Aberdeen_demographics)
library(tidyverse)
df_Aberdeen_demographics %>%
group_by(gender)
df_Aberdeen_demographics %>%
group_by(gender) %>%
summarise(n = n())
load("scratch/data/df_Aberdeen_avater_info")
head(df_Aberdeen_avatar_info)
summary(df_Aberdeen_avatar_info)
df_Aberdeen_avatar_info %>%
group_by(max_speed) %>%
summarise(n = n())
