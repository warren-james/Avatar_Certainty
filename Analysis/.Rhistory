# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,speed,spreads,success,temp)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = spread)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~skew)
beta_frame %>%
mutate(spread = as.factor(spread),
norm_dist = end_dist/delta) %>%
ggplot(aes(norm_dist, fill = spread)) +
geom_histogram(position = "dodge", binwidth = 0.075) +
scale_x_continuous(breaks = c(0.25, 0.75)) +
facet_grid(skew ~ delta)
2 * 3 * 9 * 1000
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 6),
beta2 = c(6, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
#### Moving truck ####
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = spread)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~skew)
ggplot(aes(x = seq(0,1,0.01), y =  dbeta(x, 3,3))) + geom_line()
ggplot(data = data.frame(x = seq(0,1,0.01), y =  dbeta(x, 3,3)), aes(x,y)) + geom_line()
head(beta)
head(betas)
distr_plots <- data.frame(x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(round(x*max_speed)+1,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew, fill = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
distr_plots <- data.frame(skew = character(),
spread = character(),
x = numeric(),
y = numeric())
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
# make plots of this
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
mean(1,2,3)
mean(c(1,2,3))
first <- mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(first, second)
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
mean(first, second)
(first + second)/2
mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
0.75
a <- 0.75
a <- 0.63
b <- 0.33
mean(a, b)
(a + b)/2
(0.3333333333333333333333 + 0.63333333333333333333333333333)/2
(0.3333333333333333333333 + 0.6666666666666666666666666)/2
rm(list = ls())
(155.16*4) + 72.93 + 343.62 + 181.4
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
#### Avatar - Analysis script ####
# few ideas
# modelling optimal choice vs. not
# - Define a range for each distance that would get the optimal
#   Accuracy and simply model if people are in that range for each
#   condition at the various distances?
# - Could also just do mean normalised placement again with order
#   and condition as predictors?
# - What about some more simple analysis for the final years working
#   with Alasdair?
#### Library ####
library(tidyverse)
library(rstan)
library(brms) # probably won't need this...
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
# do we ever want to use RT as a predictor?
# might make sense to do this and centre it on the global average?
#### Constants ####
travel_time <- 100
#### Any Functions ####
#### Load in data ####
load("scratch/data/df_decisions")
# make model data
model_data <- df_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta))
# add in binary predictors for stan modelling
# condition
model_data$cnd_rand <- 1
model_data$cnd_rand[model_data$truck_perf == "Constant"] <- 0
# reduce down columns
model_data <- model_data %>%
select(-condition,
-spread,
-initial_x,
-speed,
-success) %>% # only for now
mutate(Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1.01)
head(model_data)
head(df_decisions)
length(unique(df_decisions$speed))
#### Avatar - Analysis script ####
# few ideas
# modelling optimal choice vs. not
# - Define a range for each distance that would get the optimal
#   Accuracy and simply model if people are in that range for each
#   condition at the various distances?
# - Could also just do mean normalised placement again with order
#   and condition as predictors?
# - What about some more simple analysis for the final years working
#   with Alasdair?
#### Library ####
library(tidyverse)
library(rstan)
library(brms) # probably won't need this...
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
# do we ever want to use RT as a predictor?
# might make sense to do this and centre it on the global average?
#### Constants ####
travel_time <- 100
#### Any Functions ####
#### Load in data ####
load("scratch/data/df_decisions")
# make model data
model_data <- df_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta))
# make model data
model_data <- df_decisions %>%
mutate(Abs_Norm_pos = abs(placed_x/delta)) %>%
group_by(truck_perf) %>%
mutate(num_speeds = length(unique(speed))) %>%
ungroup()
# add in binary predicto
View(model_data)
model_data$cnd_rand <- 1
model_data$cnd_rand[model_data$truck_perf == "Constant"] <- 0
# reduce down columns
model_data <- model_data %>%
select(-condition,
-spread,
-initial_x,
-speed,
-success) %>% # only for now
mutate(Norm_Delta = delta/max(delta)) %>%
filter(Abs_Norm_pos < 1.01)
model_brms_3<- brm(Abs_Norm_pos ~ (Norm_Delta + truck_perf)^2,
data = model_data,
family = "beta",
iter = 2000,
chains = 1,
cores = 1)
View(model_data)
# same again but with using num_speed
model_brms_3.1 <- brm(Abs_Norm_pos ~ (Norm_Delta + num_speeds)^2,
data = model_data,
family = "beta",
iter = 2000,
chains = 1,
cores = 1)
summary(model_brms_3)
summary(model_brms_3)
summary(model_brms_3.1)
plot(marginal_effects(model_brms_3.1))
