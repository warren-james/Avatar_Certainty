travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = spread)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~skew)
ggplot(aes(x = seq(0,1,0.01), y =  dbeta(x, 3,3))) + geom_line()
ggplot(data = data.frame(x = seq(0,1,0.01), y =  dbeta(x, 3,3)), aes(x,y)) + geom_line()
head(beta)
head(betas)
distr_plots <- data.frame(x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(round(x*max_speed)+1,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew, fill = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
distr_plots <- data.frame(skew = character(),
spread = character(),
x = numeric(),
y = numeric())
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
# make plots of this
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
mean(1,2,3)
mean(c(1,2,3))
first <- mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(first, second)
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
mean(first, second)
(first + second)/2
mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
0.75
a <- 0.75
a <- 0.63
b <- 0.33
mean(a, b)
(a + b)/2
(0.3333333333333333333333 + 0.63333333333333333333333333333)/2
(0.3333333333333333333333 + 0.6666666666666666666666666)/2
rm(list = ls())
setwd("F:/Uni/Github/Avatar_Certainty/Analysis")
#### Avatar - Make some plots ####
# plots of decisions
# compare estimates to actual performance curves
# Something with number of clicks?
# RT may only be useful for modelling?
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
#### Constants ####
travel_time <- 100
#### Libraries ####
library(tidyverse)
library(ggthemes)
library(psyphy)
#### Load in data ####
# Distribution info
load("scratch/data/df_beta")
# Click History
load("scratch/data/df_clickhist")
# Decision phase
load("scratch/data/df_decisions")
# Separations
load("scratch/data/df_deltas")
# Estimate phase
load("scratch/data/df_estimates")
# Screen information
load("scratch/data/df_screen_info")
# demo_phase
load("scratch/data/df_demo_phase")
# avatar info
load("scratch/data/df_avater_info")
# confidence
load("scratch/data/df_confidence")
#### PLOTS: ####
#### PLOTS: Estimates vs actual ####
betas <- unique(df_decisions$Spread)
# setup empty frame to mirror estimates
df_simulated <- data.frame(Participant = character(),
Spread = numeric(),
Delta = numeric(),
Estimate = numeric(),
Estimate_type = character())
# loop to get a simulation of what accuracy would look like
# for each separation in each condition
for(p in unique(df_estimates$Participant)){
# subset
ss <- df_estimates[df_estimates$Participant == p,]
# max speed
max_speed <- df_avatar_info$max_speed[df_avatar_info$Participant == p]
# reach
reach <- df_avatar_info$reach[df_avatar_info$Participant == p]
for(B in unique(betas)){
Spread <- B
# gen distances covered given defined distribution
y <- (round(rbeta(100000, B, B)*max_speed)+1) * travel_time
# make data_frame
deltas <- data.frame(Participant = p,
Spread = B,
Delta = unique(ss$Delta))
deltas <- deltas %>%
group_by(Participant, Spread, Delta) %>%
mutate(Estimate = sum(y >= Delta - reach)/length(y),
Estimate_Type = "Simulated")
# add to data frame
df_simulated = rbind(df_simulated, as.data.frame(deltas))
}
}
# tidy
rm(deltas, ss, B, betas, max_speed, p, Spread, y, reach)
# add in truck_perf
df_simulated$truck_perf <- "Random_Uniform"
df_simulated$truck_perf[df_simulated$Spread > 1] = "Highly_Certain"
# bind data sets?
df_est_sim <- rbind(df_estimates, df_simulated)
# tidy
rm(df_simulated)
# now get glm lines for this
plt_estimates <- df_est_sim %>%
mutate(Spread = as.factor(Spread)) %>%
group_by(Participant, truck_perf, Delta, Estimate_Type) %>%
summarise(Estimate = mean(Estimate)) %>%
ggplot(aes(Delta, Estimate,
colour = Estimate_Type,
shape = Estimate_Type)) +
geom_point() +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = Estimate),
se = F) +
geom_smooth(data = df_demo_phase,
method = glm,
method.args = list(family = "binomial"),
aes(y = Success),
se = F) +
theme_bw() +
facet_wrap(~truck_perf + Participant, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank())
plt_estimates$labels$y <- "Estimated Accuracy"
plt_estimates$labels$colour <- "Estimate Type"
plt_estimates$labels$shape <- "Estimate Type"
plt_estimates
# save
ggsave("scratch/plots/plt_estimates.png",
height = 17,
width = 24,
units = "cm")
#### PLOTS: decision phase ####
plt_decisions <- df_decisions %>%
mutate(Condition = as.factor(Condition),
Spread = as.factor(Spread),
Rand_first = as.factor(Rand_first),
Norm_Placement = abs(Placed_x/Delta)) %>%
ggplot(aes(Delta, Norm_Placement,
colour = truck_perf)) +
geom_point(alpha = 0.2) +
theme_bw() +
facet_wrap(~truck_perf + Participant, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank()) +
scale_colour_ptol()
plt_decisions$labels$x <- "Delta (pixels)"
plt_decisions$labels$y <- "Absolute Normalised Avatar Position"
plt_decisions
# save
ggsave("scratch/plots/plt_decisions.png",
height = 17,
width = 24,
units = "cm")
#### PLOT: decisions phase again... with order info ####
plt_decisions <- df_decisions %>%
mutate(Condition = as.factor(Condition),
Spread = as.factor(Spread),
Rand_first = as.factor(Rand_first),
Norm_Placement = abs(Placed_x/Delta)) %>%
ggplot(aes(Delta, Norm_Placement,
colour = truck_perf)) +
geom_point(alpha = 0.2) +
theme_bw() +
facet_wrap(~Participant + Block + truck_perf, ncol = 10) +
theme(legend.position = "bottom",
strip.text.x = element_blank()) +
scale_colour_ptol()
plt_decisions$labels$x <- "Delta (pixels)"
plt_decisions$labels$y <- "Absolute Normalised Avatar Position"
plt_decisions
# save
ggsave("scratch/plots/plt_decisions_order.png",
height = 17,
width = 24,
units = "cm")
#### PLOT: placement by furthest and closest, and Condition ####
# plot of placement position
# first, remove the mid point as that's not very diagnostic
plt_dist_dec <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# label the new "conditions"
plt_dist_dec$dist_type <- "Close"
plt_dist_dec$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# Make the plot
plt_dist_dec <- plt_dist_dec %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
group_by(Participant, dist_type, truck_perf) %>%
summarise(pos = mean(abs_pos)) %>%
ungroup() %>%
ggplot(aes(pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec$labels$x <- "Normalised Placement"
plt_dist_dec$labels$colour <- "Condition"
plt_dist_dec$labels$fill <- "Condition"
plt_dist_dec
# save
ggsave("scratch/plots/plt_dist_dec.png",
height = 8,
width = 14,
units = "cm")
# same again but without getting means
plt_dist_dec_2 <- df_decisions %>%
group_by(Participant) %>%
mutate(mid_delta = mean(as.numeric(Delta))) %>%
filter(as.numeric(Delta) != mid_delta)
# add new labels
plt_dist_dec_2$dist_type <- "Close"
plt_dist_dec_2$dist_type[as.numeric(plt_dist_dec$Delta) > plt_dist_dec$mid_delta] <- "Far"
# make plot
plt_dist_dec_2 <- plt_dist_dec_2 %>%
mutate(abs_pos = abs(Placed_x)/Delta) %>%
filter(abs_pos < 1.01) %>%
ggplot(aes(abs_pos,
colour = truck_perf,
fill = truck_perf)) +
geom_density(alpha = 0.3) +
facet_wrap(~dist_type)
plt_dist_dec_2
dev.off()
plt_estimates
load("models/outputs/brms_m4.1")
summary(m4.1)
library(brms)
post <- marginal_effects(m4.1)
plot(post)
loo(m4.1)
head(plt_dist_dec_2)
head(plt_dist_dec_2$data)
m1 <_
m1 <- lm(abs_pos ~ (dist_type + truck_perf)^2, data = plt_dist_dec_2$data)
temp <- plt_dist_dec_2 %>% mutate(dist_type = as.factor(dist_type), truck_perf = as.factor(truck_perf))
temp <- plt_dist_dec_2$data %>% mutate(dist_type = as.factor(dist_type), truck_perf = as.factor(truck_perf))
m1 <- lm(abs_pos ~ (dist_type + truck_perf)^2, data = temp)
