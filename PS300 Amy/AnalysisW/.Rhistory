value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste(expression(Beta), ": ", beta, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma),": ", gamma, sep = ""))) +
see::scale_color_flat() +
scale_y_continuous(expression(beta))
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste(expression(beta), ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma),": ", g, sep = ""))) +
see::scale_color_flat() +
scale_y_continuous(expression(beta))
temp <- as.tibble(solve_SIR(S0, I0, beta = beta, gamma = gamma)) %>%
mutate(t = seq(1, 8000, 1),
b = beta,
g = gamma)
# plot this
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste(expression(beta), ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma),": ", g, sep = ""))) +
see::scale_color_flat() +
scale_y_continuous(expression(beta))
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste(expression(beta), ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat() +
scale_y_continuous(paste(expression(beta), "seomthign")
)
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta==", ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat() +
scale_y_continuous(paste(expression(beta), "seomthign"))
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("Beta==", ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat()
pop = 1
I0 = 1e-4
S0 = pop - I0
b = 1.1
g = .5
temp <- as.tibble(solve_SIR(S0, I0, beta = b, g = gamma)) %>%
mutate(t = seq(1, 8000, 1),
b = beta,
g = gamma)
# plot this
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", ": ", b, sep = "")))+
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat()
# plot this
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", ": ", b)))+
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat()
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", b))) +
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat()
pop = 1
I0 = 1e-4
S0 = pop - I0
b = 1.1
g = .5
temp <- as.tibble(solve_SIR(S0, I0, beta = b, g = gamma)) %>%
mutate(t = seq(1, 8000, 1),
b = b,
g = g)
# plot this
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", b))) +
geom_text(aes(3000, .9,
label = paste(expression(gamma), ": ", g, sep = ""))) +
see::scale_color_flat()
# plot this
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", b))) +
geom_text(aes(3000, .9,
label = paste("gamma ==", ": ", g, sep = ""))) +
see::scale_color_flat()
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", b))) +
geom_text(aes(3000, .9,
label = paste("gamma ==", g), parse = T)) +
see::scale_color_flat()
temp %>%
filter(t <= 4000) %>%
gather(S:R,
key = "type",
value = "prop") %>%
ggplot(aes(t, prop)) +
geom_point(aes(colour = type)) +
geom_text(aes(3000, .95,
label = paste("beta ==", b)), parse = T) +
geom_text(aes(3000, .9,
label = paste("gamma ==", g)), parse = T) +
see::scale_color_flat()
setwd("E:/Github/Avatar_Certainty/PS300 Amy/AnalysisW")
#### import data ####
# this script will import all the data for the Certainty version of the avatar expriment
#### Library ####
library(tidyverse)
library(R.matlab)
#### Read in data ####
#### decisions ####
results_files <- c("data/Decisions/")
df_decisions <- tibble()
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_decisions <- rbind(df_decisions, d)
}
# tidy
rm(f, results_files, d)
# tidy dataset
df_decisions <- df_decisions %>%
filter(!Participant %in% c("0"))
# save file
save(df_decisions, file = "scratch/df_decisions")
#### demographics ####
results_files <- c("data/Demographics/")
df_demographics <- tibble()
for(f in dir(results_files)) {
d <- readMat(paste(results_files, f, sep = ""))
age <- d$age
gender <- d$gender
participant <- strsplit(f, '[_.]')[[1]][1]
df_demographics <- rbind(df_demographics, data.frame(Participant = participant,
age = age,
gender = gender))
}
View(df_demographics)
#### import data ####
# this script will import all the data for the Certainty version of the avatar expriment
#### Library ####
library(tidyverse)
library(R.matlab)
#### Read in data ####
#### decisions ####
results_files <- c("data/Decisions/")
df_decisions <- tibble()
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_decisions <- rbind(df_decisions, d)
}
# tidy
rm(f, results_files, d)
# tidy dataset
df_decisions <- df_decisions %>%
filter(!Participant %in% c("0"))
# save file
save(df_decisions, file = "scratch/df_decisions")
#### demographics ####
results_files <- c("data/Demographics/")
df_demographics <- tibble()
for(f in dir(results_files)) {
d <- readMat(paste(results_files, f, sep = ""))
age <- d$age
gender <- d$gender
participant <- strsplit(f, '[_.]')[[1]][1]
df_demographics <- rbind(df_demographics, data.frame(Participant = participant,
age = age,
gender = gender))
}
# tidy data
df_demographics <- df_demographics %>%
mutate(gender = tolower(gender),
gender = ifelse(gender == "f", "female", gender))
# save
save(df_demographics, file = "scratch/df_demographics")
# tidy
rm(age, gender, f, participant, results_files, d)
#### confidence ####
results_files <- c("data/Confidence/")
df_confidence <- tibble()
for(f in dir(results_files)) {
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_confidence <- rbind(df_confidence, d)
}
# tidy data
df_confidence <- df_confidence %>%
filter(Participant != "0")
# save
save(df_confidence, file = "scratch/df_confidence")
# tidy
rm(d, f, results_files)
#### screen_info ####
results_files <- c("data/Screen_info/")
# setup df
df_screen_info <- tibble(Participant = character(),
x_res = numeric(),
y_res = numeric())
df_deltas <- tibble(Participant = character(),
delta = numeric())
df_beta <- tibble(Participant = character(),
beta1 = numeric(),
beta2 = numeric())
df_avatar_info <- tibble(Participant = character(),
max_speed = numeric(),
reach = numeric())
for(f in dir(results_files)) {
d <- readMat(paste(results_files, f, sep = ""))
# participant
Participant <- strsplit(f, '[_.]')[[1]][1]
# screen res
x_res <- as.numeric(d$params[1]) * 2
y_res <- as.numeric(d$params[2]) * 2
# betas
betas <- d$box[[2]]
beta1 <- betas[1]
beta2 <- betas[2]
# Delta
delta <- unlist(d$params[3])
# reach
reach <- as.numeric(d$box[4])
# max_speed
max_speed <- as.numeric(d$box[1])
# bind to dataframes
df_screen_info <- rbind(df_screen_info, tibble(Participant = Participant,
x_res = x_res,
y_res = y_res))
df_deltas <- rbind(df_deltas, tibble(Participant = Participant,
delta = delta))
df_beta <- rbind(df_beta, tibble(Participant = Participant,
beta1 = beta1,
beta2 = beta2))
df_avatar_info <- rbind(df_avatar_info, tibble(Participant = Participant,
max_speed = max_speed,
reach = reach))
}
# tidy
rm(betas, d, beta1, beta2, delta, f, max_speed,
Participant, reach, results_files, x_res, y_res)
# save
save(df_avatar_info, file = "scratch/df_avatar_info")
save(df_screen_info, file = "scratch/df_screen_info")
#### click history ####
results_files <- c("data/Click_history/")
df_clickhist <- tibble()
for(f in dir(results_files)) {
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_clickhist <- rbind(df_clickhist, d)
}
# tidy
rm(d, f, results_files)
# save
save(df_clickhist, file = "scratch/df_clickhist")
results_files <- c("data/Click_history/")
df_clickhist <- tibble()
for(f in dir(results_files)) {
if(f == "16") {
break
}
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_clickhist <- rbind(df_clickhist, d)
}
View(df_clickhist)
# tidy
rm(d, f, results_files)
# save
save(df_clickhist, file = "scratch/df_clickhist")
results_files <- c("data/Click_history/")
df_clickhist <- tibble()
for(f in dir(results_files)) {
if(f == "16_clickhist.txt") {
break
}
d <- read.csv(paste(results_files, f, sep = ""))
d$Participant <- strsplit(f, '[_.]')[[1]][1]
df_clickhist <- rbind(df_clickhist, d)
}
unique(df+dec)
unique(df_decisions$Participant)
rm(list = ls())
#### Processing data ####
# sort out data frames to be useful
#### library ####
library(tidyverse)
#### Functions ####
# squash range to be suitable for beta analysis
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
return(y)
}
#### load in data ####
load("scratch/df_decisions")
load("scratch/df_clickhist")
load("scratch/df_screen_info")
load("scratch/df_avatar_info")
load("scratch/df_demographics")
#### demographic information ####
df_demographics %>%
summarise(mu_age = mean(age),
sd_age = sd(age),
med_age = median(age),
upper = max(age),
lower = min(age))
df_demographics %>%
group_by(gender) %>%
summarise(n = n())
#### decision data ####
df_decisions <- df_decisions %>%
mutate(norm_placement = abs(Placed_x)/Delta,
truck_perf = ifelse(Spread == 1, "Random",
ifelse(Spread == 10, "Uncertain", "Certain")),
truck_perf = factor(truck_perf, levels = c("Random", "Uncertain", "Certain")),
dist_type = ifelse(Delta < max(Delta)/2, "Close", "Far"))
df_agg <- df_decisions %>%
group_by(Participant, truck_perf, dist_type) %>%
summarise(mean_placement = round(mean(norm_placement), digits = 3))
df_wide_agg <- df_agg %>%
mutate(dist_cond = paste(dist_type, truck_perf, sep = "_")) %>%
ungroup() %>%
select(Participant, dist_cond, mean_placement) %>%
spread(key = dist_cond,
value = mean_placement)
write.csv(df_agg, file = "scratch/new_data_files/df_agg.txt", row.names = F)
write.csv(df_wide_agg, file = "scratch/new_data_files/df_agg_wide.txt", row.names = F)
View(df_agg)
View(df_wide_agg)
df_decisions %>%
ggplot(aes(norm_placement, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3) +
facet_wrap(~Delta) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat()
df_decisions <- df_decisions %>%
mutate(norm_placement = abs(Placed_x)/Delta,
truck_perf = ifelse(Spread == 1, "Random",
ifelse(Spread == 10, "Uncertain", "Certain")),
truck_perf = factor(truck_perf, levels = c("Random", "Uncertain", "Certain")),
dist_type = ifelse(Delta < max(Delta)/2, "Close", "Far")) %>%
filter(norm_placement <= 1)
load("scratch/df_decisions")
df_decisions <- df_decisions %>%
mutate(norm_placement = abs(Placed_x)/Delta,
truck_perf = ifelse(Spread == 1, "Random",
ifelse(Spread == 10, "Uncertain", "Certain")),
truck_perf = factor(truck_perf, levels = c("Random", "Uncertain", "Certain")),
dist_type = ifelse(Delta < max(Delta)/2, "Close", "Far")) %>%
filter(norm_placement <= 1)
df_agg <- df_decisions %>%
group_by(Participant, truck_perf, dist_type) %>%
summarise(mean_placement = round(mean(norm_placement), digits = 3))
df_wide_agg <- df_agg %>%
mutate(dist_cond = paste(dist_type, truck_perf, sep = "_")) %>%
ungroup() %>%
select(Participant, dist_cond, mean_placement) %>%
spread(key = dist_cond,
value = mean_placement)
write.csv(df_agg, file = "scratch/new_data_files/df_agg.txt", row.names = F)
write.csv(df_wide_agg, file = "scratch/new_data_files/df_agg_wide.txt", row.names = F)
df_decisions %>%
ggplot(aes(norm_placement, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3) +
facet_wrap(~Delta) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat()
df_decisions %>%
group_by(Participant, truck_perf, dist_type) %>%
summarise(mu_pos = mean(norm_placement)) %>%
ggplot(aes(mu_pos, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3) +
# geom_histogram(aes(y = ..density..),
#                position = "dodge",
#                alpha = .3) +
facet_wrap(~dist_type) +
theme_bw() +
scale_x_continuous(breaks = seq(0,1,.25),
limits = c(0,1)) +
see::scale_color_flat() +
see::scale_fill_flat()
df_agg %>%
ggplot(aes(dist_type, mean_placement,
colour = truck_perf,
fill = truck_perf)) +
geom_boxplot(alpha = .3) +
geom_point(position = position_jitterdodge(.1)) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_y_continuous("Mean Normalised Placement",
# breaks = seq(0,1,.25),
breaks = c(0,1),
labels = c("Centre", "Side"),
limits = c(0,1)) +
scale_x_discrete("Distance Type") +
guides(fill = guide_legend(title = "Condition"),
colour = guide_legend(title = "Condition"))
library(brms)
model_data <- df_decisions %>%
filter(norm_placement <= 1) %>%
ungroup() %>%
mutate(norm_placement = squash(norm_placement, 1, 0, 1e-5))
m1 <- brm(norm_placement ~ (dist_type + truck_perf)^2,
data = model_data,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m1)
plot(marginal_effects(m1))
head(df_decisions)
df_decisions %>%
ggplot(aes(RT, colour = truck_perf, fill = truck_perf)) +
geom_denisty(alpha = .3)
df_decisions %>%
ggplot(aes(RT, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3)
df_decisions %>%
filter(RT <= 10) %>%
ggplot(aes(RT, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3)
df_decisions %>%
filter(RT <= 10) %>%
ggplot(aes(RT, colour = truck_perf, fill = truck_perf)) +
geom_density(alpha = .3) +
facet_wrap(~dist_type)
